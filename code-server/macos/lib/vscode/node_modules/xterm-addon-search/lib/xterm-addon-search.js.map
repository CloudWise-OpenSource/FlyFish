{"version":3,"sources":["webpack://SearchAddon/webpack/universalModuleDefinition","webpack://SearchAddon/./src/SearchAddon.ts","webpack://SearchAddon/webpack/bootstrap","webpack://SearchAddon/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","NON_WORD_CHARACTERS","_linesCacheTimeoutId","activate","terminal","this","_terminal","dispose","findNext","term","searchOptions","Error","length","clearSelection","currentSelection","startCol","startRow","hasSelection","incremental","getSelectionPosition","endRow","startColumn","endColumn","_initLinesCache","searchPosition","result","_findInLine","y","buffer","active","baseY","rows","_selectResult","findPrevious","isReverseSearch","cols","row","col","Math","max","_linesCache","Array","_cursorMoveListener","onCursorMove","_destroyLinesCache","_resizeListener","onResize","window","clearTimeout","setTimeout","undefined","_isWholeWord","searchIndex","line","includes","firstLine","getLine","isWrapped","stringLine","_translateBufferLineToStringWithWrap","searchTerm","caseSensitive","toLowerCase","searchStringLine","resultIndex","regex","searchRegex","RegExp","foundTerm","exec","slice","lastIndex","lastIndexOf","indexOf","floor","wholeWord","i","cell","getCell","char","getChars","getWidth","lineIndex","trimRight","lineWrapsToNext","lineString","nextLine","translateToString","substring","select","viewportY","scrollLines","SearchAddon","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"xterm-addon-search.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SearchAddon\"] = factory();\n\telse\n\t\troot[\"SearchAddon\"] = factory();\n})(self, function() {\nreturn ","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, IDisposable, ITerminalAddon, ISelectionPosition } from 'xterm';\n\nexport interface ISearchOptions {\n  regex?: boolean;\n  wholeWord?: boolean;\n  caseSensitive?: boolean;\n  incremental?: boolean;\n}\n\nexport interface ISearchPosition {\n  startCol: number;\n  startRow: number;\n}\n\nexport interface ISearchResult {\n  term: string;\n  col: number;\n  row: number;\n}\n\nconst NON_WORD_CHARACTERS = ' ~!@#$%^&*()+`-=[]{}|\\;:\"\\',./<>?';\nconst LINES_CACHE_TIME_TO_LIVE = 15 * 1000; // 15 secs\n\nexport class SearchAddon implements ITerminalAddon {\n  private _terminal: Terminal | undefined;\n\n  /**\n   * translateBufferLineToStringWithWrap is a fairly expensive call.\n   * We memoize the calls into an array that has a time based ttl.\n   * _linesCache is also invalidated when the terminal cursor moves.\n   */\n  private _linesCache: string[] | undefined;\n  private _linesCacheTimeoutId = 0;\n  private _cursorMoveListener: IDisposable | undefined;\n  private _resizeListener: IDisposable | undefined;\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n  }\n\n  public dispose(): void { }\n\n  /**\n   * Find the next instance of the term, then scroll to and select it. If it\n   * doesn't exist, do nothing.\n   * @param term The search term.\n   * @param searchOptions Search options.\n   * @return Whether a result was found.\n   */\n  public findNext(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n\n    if (!term || term.length === 0) {\n      this._terminal.clearSelection();\n      return false;\n    }\n\n    let startCol = 0;\n    let startRow = 0;\n    let currentSelection: ISelectionPosition | undefined;\n    if (this._terminal.hasSelection()) {\n      const incremental = searchOptions ? searchOptions.incremental : false;\n      // Start from the selection end if there is a selection\n      // For incremental search, use existing row\n      currentSelection = this._terminal.getSelectionPosition()!;\n      startRow = incremental ? currentSelection.startRow : currentSelection.endRow;\n      startCol = incremental ? currentSelection.startColumn : currentSelection.endColumn;\n    }\n\n    this._initLinesCache();\n\n    const searchPosition: ISearchPosition = {\n      startRow,\n      startCol\n    };\n\n    // Search startRow\n    let result = this._findInLine(term, searchPosition, searchOptions);\n\n    // Search from startRow + 1 to end\n    if (!result) {\n\n      for (let y = startRow + 1; y < this._terminal.buffer.active.baseY + this._terminal.rows; y++) {\n        searchPosition.startRow = y;\n        searchPosition.startCol = 0;\n        // If the current line is wrapped line, increase index of column to ignore the previous scan\n        // Otherwise, reset beginning column index to zero with set new unwrapped line index\n        result = this._findInLine(term, searchPosition, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n    // If we hit the bottom and didn't search from the very top wrap back up\n    if (!result && startRow !== 0) {\n      for (let y = 0; y < startRow; y++) {\n        searchPosition.startRow = y;\n        searchPosition.startCol = 0;\n        result = this._findInLine(term, searchPosition, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n\n    // If there is only one result, wrap back and return selection if it exists.\n    if (!result && currentSelection) {\n      searchPosition.startRow = currentSelection.startRow;\n      searchPosition.startCol = 0;\n      result = this._findInLine(term, searchPosition, searchOptions);\n    }\n\n    // Set selection and scroll if a result was found\n    return this._selectResult(result);\n  }\n\n  /**\n   * Find the previous instance of the term, then scroll to and select it. If it\n   * doesn't exist, do nothing.\n   * @param term The search term.\n   * @param searchOptions Search options.\n   * @return Whether a result was found.\n   */\n  public findPrevious(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n\n    if (!term || term.length === 0) {\n      this._terminal.clearSelection();\n      return false;\n    }\n\n    const isReverseSearch = true;\n    let startRow = this._terminal.buffer.active.baseY + this._terminal.rows;\n    let startCol = this._terminal.cols;\n    let result: ISearchResult | undefined;\n    const incremental = searchOptions ? searchOptions.incremental : false;\n    let currentSelection: ISelectionPosition | undefined;\n    if (this._terminal.hasSelection()) {\n      currentSelection = this._terminal.getSelectionPosition()!;\n      // Start from selection start if there is a selection\n      startRow = currentSelection.startRow;\n      startCol = currentSelection.startColumn;\n    }\n\n    this._initLinesCache();\n    const searchPosition: ISearchPosition = {\n      startRow,\n      startCol\n    };\n\n    if (incremental) {\n      // Try to expand selection to right first.\n      result = this._findInLine(term, searchPosition, searchOptions, false);\n      const isOldResultHighlighted = result && result.row === startRow && result.col === startCol;\n      if (!isOldResultHighlighted) {\n        // If selection was not able to be expanded to the right, then try reverse search\n        if (currentSelection) {\n          searchPosition.startRow = currentSelection.endRow;\n          searchPosition.startCol = currentSelection.endColumn;\n        }\n        result = this._findInLine(term, searchPosition, searchOptions, true);\n      }\n    } else {\n      result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n    }\n\n    // Search from startRow - 1 to top\n    if (!result) {\n      searchPosition.startCol = Math.max(searchPosition.startCol, this._terminal.cols);\n      for (let y = startRow - 1; y >= 0; y--) {\n        searchPosition.startRow = y;\n        result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n        if (result) {\n          break;\n        }\n      }\n    }\n    // If we hit the top and didn't search from the very bottom wrap back down\n    if (!result && startRow !== (this._terminal.buffer.active.baseY + this._terminal.rows)) {\n      for (let y = (this._terminal.buffer.active.baseY + this._terminal.rows); y >= startRow; y--) {\n        searchPosition.startRow = y;\n        result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n        if (result) {\n          break;\n        }\n      }\n    }\n\n    // If there is only one result, return true.\n    if (!result && currentSelection) return true;\n\n    // Set selection and scroll if a result was found\n    return this._selectResult(result);\n  }\n\n  /**\n   * Sets up a line cache with a ttl\n   */\n  private _initLinesCache(): void {\n    const terminal = this._terminal!;\n    if (!this._linesCache) {\n      this._linesCache = new Array(terminal.buffer.active.length);\n      this._cursorMoveListener = terminal.onCursorMove(() => this._destroyLinesCache());\n      this._resizeListener = terminal.onResize(() => this._destroyLinesCache());\n    }\n\n    window.clearTimeout(this._linesCacheTimeoutId);\n    this._linesCacheTimeoutId = window.setTimeout(() => this._destroyLinesCache(), LINES_CACHE_TIME_TO_LIVE);\n  }\n\n  private _destroyLinesCache(): void {\n    this._linesCache = undefined;\n    if (this._cursorMoveListener) {\n      this._cursorMoveListener.dispose();\n      this._cursorMoveListener = undefined;\n    }\n    if (this._resizeListener) {\n      this._resizeListener.dispose();\n      this._resizeListener = undefined;\n    }\n    if (this._linesCacheTimeoutId) {\n      window.clearTimeout(this._linesCacheTimeoutId);\n      this._linesCacheTimeoutId = 0;\n    }\n  }\n\n  /**\n   * A found substring is a whole word if it doesn't have an alphanumeric character directly adjacent to it.\n   * @param searchIndex starting indext of the potential whole word substring\n   * @param line entire string in which the potential whole word was found\n   * @param term the substring that starts at searchIndex\n   */\n  private _isWholeWord(searchIndex: number, line: string, term: string): boolean {\n    return ((searchIndex === 0) || (NON_WORD_CHARACTERS.includes(line[searchIndex - 1]))) &&\n      (((searchIndex + term.length) === line.length) || (NON_WORD_CHARACTERS.includes(line[searchIndex + term.length])));\n  }\n\n  /**\n   * Searches a line for a search term. Takes the provided terminal line and searches the text line, which may contain\n   * subsequent terminal lines if the text is wrapped. If the provided line number is part of a wrapped text line that\n   * started on an earlier line then it is skipped since it will be properly searched when the terminal line that the\n   * text starts on is searched.\n   * @param term The search term.\n   * @param position The position to start the search.\n   * @param searchOptions Search options.\n   * @param isReverseSearch Whether the search should start from the right side of the terminal and search to the left.\n   * @return The search result if it was found.\n   */\n  protected _findInLine(term: string, searchPosition: ISearchPosition, searchOptions: ISearchOptions = {}, isReverseSearch: boolean = false): ISearchResult | undefined {\n    const terminal = this._terminal!;\n    let row = searchPosition.startRow;\n    const col = searchPosition.startCol;\n\n    // Ignore wrapped lines, only consider on unwrapped line (first row of command string).\n    const firstLine = terminal.buffer.active.getLine(row);\n    if (firstLine?.isWrapped) {\n      if (isReverseSearch) {\n        searchPosition.startCol += terminal.cols;\n        return;\n      }\n\n      // This will iterate until we find the line start.\n      // When we find it, we will search using the calculated start column.\n      searchPosition.startRow--;\n      searchPosition.startCol += terminal.cols;\n      return this._findInLine(term, searchPosition, searchOptions);\n    }\n    let stringLine = this._linesCache ? this._linesCache[row] : void 0;\n    if (stringLine === void 0) {\n      stringLine = this._translateBufferLineToStringWithWrap(row, true);\n      if (this._linesCache) {\n        this._linesCache[row] = stringLine;\n      }\n    }\n\n    const searchTerm = searchOptions.caseSensitive ? term : term.toLowerCase();\n    const searchStringLine = searchOptions.caseSensitive ? stringLine : stringLine.toLowerCase();\n\n    let resultIndex = -1;\n    if (searchOptions.regex) {\n      const searchRegex = RegExp(searchTerm, 'g');\n      let foundTerm: RegExpExecArray | null;\n      if (isReverseSearch) {\n        // This loop will get the resultIndex of the _last_ regex match in the range 0..col\n        while (foundTerm = searchRegex.exec(searchStringLine.slice(0, col))) {\n          resultIndex = searchRegex.lastIndex - foundTerm[0].length;\n          term = foundTerm[0];\n          searchRegex.lastIndex -= (term.length - 1);\n        }\n      } else {\n        foundTerm = searchRegex.exec(searchStringLine.slice(col));\n        if (foundTerm && foundTerm[0].length > 0) {\n          resultIndex = col + (searchRegex.lastIndex - foundTerm[0].length);\n          term = foundTerm[0];\n        }\n      }\n    } else {\n      if (isReverseSearch) {\n        if (col - searchTerm.length >= 0) {\n          resultIndex = searchStringLine.lastIndexOf(searchTerm, col - searchTerm.length);\n        }\n      } else {\n        resultIndex = searchStringLine.indexOf(searchTerm, col);\n      }\n    }\n\n    if (resultIndex >= 0) {\n      // Adjust the row number and search index if needed since a \"line\" of text can span multiple rows\n      if (resultIndex >= terminal.cols) {\n        row += Math.floor(resultIndex / terminal.cols);\n        resultIndex = resultIndex % terminal.cols;\n      }\n      if (searchOptions.wholeWord && !this._isWholeWord(resultIndex, searchStringLine, term)) {\n        return;\n      }\n\n      const line = terminal.buffer.active.getLine(row);\n\n      if (line) {\n        for (let i = 0; i < resultIndex; i++) {\n          const cell = line.getCell(i);\n          if (!cell) {\n            break;\n          }\n          // Adjust the searchIndex to normalize emoji into single chars\n          const char = cell.getChars();\n          if (char.length > 1) {\n            resultIndex -= char.length - 1;\n          }\n          // Adjust the searchIndex for empty characters following wide unicode\n          // chars (eg. CJK)\n          const charWidth = cell.getWidth();\n          if (charWidth === 0) {\n            resultIndex++;\n          }\n        }\n      }\n      return {\n        term,\n        col: resultIndex,\n        row\n      };\n    }\n  }\n\n  /**\n   * Translates a buffer line to a string, including subsequent lines if they are wraps.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param line The line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   */\n  private _translateBufferLineToStringWithWrap(lineIndex: number, trimRight: boolean): string {\n    const terminal = this._terminal!;\n    let lineString = '';\n    let lineWrapsToNext: boolean;\n\n    do {\n      const nextLine = terminal.buffer.active.getLine(lineIndex + 1);\n      lineWrapsToNext = nextLine ? nextLine.isWrapped : false;\n      const line = terminal.buffer.active.getLine(lineIndex);\n      if (!line) {\n        break;\n      }\n      lineString += line.translateToString(!lineWrapsToNext && trimRight).substring(0, terminal.cols);\n      lineIndex++;\n    } while (lineWrapsToNext);\n\n    return lineString;\n  }\n\n  /**\n   * Selects and scrolls to a result.\n   * @param result The result to select.\n   * @return Whethera result was selected.\n   */\n  private _selectResult(result: ISearchResult | undefined): boolean {\n    const terminal = this._terminal!;\n    if (!result) {\n      terminal.clearSelection();\n      return false;\n    }\n    terminal.select(result.col, result.row, result.term.length);\n    // If it is not in the viewport then we scroll else it just gets selected\n    if (result.row >= (terminal.buffer.active.viewportY + terminal.rows) || result.row < terminal.buffer.active.viewportY) {\n      let scroll = result.row - terminal.buffer.active.viewportY;\n      scroll = scroll - Math.floor(terminal.rows / 2);\n      terminal.scrollLines(scroll);\n    }\n    return true;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(258);\n"],"sourceRoot":""}