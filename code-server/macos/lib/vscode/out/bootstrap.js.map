{"version":3,"sources":["out-vscode/bootstrap.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\n// Simple module style to support node.js and browser environments\n(function (globalThis, factory) {\n\n\t// Node.js\n\tif (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t}\n\n\t// Browser\n\telse {\n\t\tglobalThis.MonacoBootstrap = factory();\n\t}\n}(this, function () {\n\tconst Module = typeof require === 'function' ? require('module') : undefined;\n\tconst path = typeof require === 'function' ? require('path') : undefined;\n\tconst fs = typeof require === 'function' ? require('fs') : undefined;\n\n\t//#region global bootstrapping\n\n\t// increase number of stack frames(from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\n\tError.stackTraceLimit = 100;\n\n\t// Workaround for Electron not installing a handler to ignore SIGPIPE\n\t// (https://github.com/electron/electron/issues/13254)\n\tif (typeof process !== 'undefined') {\n\t\tprocess.on('SIGPIPE', () => {\n\t\t\tconsole.error(new Error('Unexpected SIGPIPE'));\n\t\t});\n\t}\n\n\t//#endregion\n\n\n\t//#region Add support for using node_modules.asar\n\n\t/**\n\t * @param {string | undefined} appRoot\n\t */\n\tfunction enableASARSupport(appRoot) {\n\t\tif (!path || !Module || typeof process === 'undefined') {\n\t\t\tconsole.warn('enableASARSupport() is only available in node.js environments'); // TODO@sandbox ASAR is currently non-sandboxed only\n\t\t\treturn;\n\t\t}\n\n\t\tlet NODE_MODULES_PATH = appRoot ? path.join(appRoot, 'node_modules') : undefined;\n\t\tif (!NODE_MODULES_PATH) {\n\t\t\tNODE_MODULES_PATH = path.join(__dirname, '../node_modules');\n\t\t} else {\n\t\t\t// use the drive letter casing of __dirname\n\t\t\tif (process.platform === 'win32') {\n\t\t\t\tNODE_MODULES_PATH = __dirname.substr(0, 1) + NODE_MODULES_PATH.substr(1);\n\t\t\t}\n\t\t}\n\n\t\tconst NODE_MODULES_ASAR_PATH = `${NODE_MODULES_PATH}.asar`;\n\n\t\t// @ts-ignore\n\t\tconst originalResolveLookupPaths = Module._resolveLookupPaths;\n\n\t\t// @ts-ignore\n\t\tModule._resolveLookupPaths = function (request, parent) {\n\t\t\tconst paths = originalResolveLookupPaths(request, parent);\n\t\t\tif (Array.isArray(paths)) {\n\t\t\t\tfor (let i = 0, len = paths.length; i < len; i++) {\n\t\t\t\t\tif (paths[i] === NODE_MODULES_PATH) {\n\t\t\t\t\t\tpaths.splice(i, 0, NODE_MODULES_ASAR_PATH);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn paths;\n\t\t};\n\t}\n\n\t//#endregion\n\n\n\t//#region URI helpers\n\n\t/**\n\t * @param {string} path\n\t * @param {{ isWindows?: boolean, scheme?: string, fallbackAuthority?: string }} config\n\t * @returns {string}\n\t */\n\tfunction fileUriFromPath(path, config) {\n\n\t\t// Since we are building a URI, we normalize any backlsash\n\t\t// to slashes and we ensure that the path begins with a '/'.\n\t\tlet pathName = path.replace(/\\\\/g, '/');\n\t\tif (pathName.length > 0 && pathName.charAt(0) !== '/') {\n\t\t\tpathName = `/${pathName}`;\n\t\t}\n\n\t\t/** @type {string} */\n\t\tlet uri;\n\n\t\t// Windows: in order to support UNC paths (which start with '//')\n\t\t// that have their own authority, we do not use the provided authority\n\t\t// but rather preserve it.\n\t\tif (config.isWindows && pathName.startsWith('//')) {\n\t\t\turi = encodeURI(`${config.scheme || 'file'}:${pathName}`);\n\t\t}\n\n\t\t// Otherwise we optionally add the provided authority if specified\n\t\telse {\n\t\t\turi = encodeURI(`${config.scheme || 'file'}://${config.fallbackAuthority || ''}${pathName}`);\n\t\t}\n\n\t\treturn uri.replace(/#/g, '%23');\n\t}\n\n\t//#endregion\n\n\n\t//#region NLS helpers\n\n\t/**\n\t * @returns {{locale?: string, availableLanguages: {[lang: string]: string;}, pseudo?: boolean } | undefined}\n\t */\n\tfunction setupNLS() {\n\n\t\t// Get the nls configuration as early as possible.\n\t\tconst process = safeProcess();\n\t\tlet nlsConfig = { availableLanguages: {} };\n\t\tif (process && process.env['VSCODE_NLS_CONFIG']) {\n\t\t\ttry {\n\t\t\t\tnlsConfig = JSON.parse(process.env['VSCODE_NLS_CONFIG']);\n\t\t\t} catch (e) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\n\t\tif (nlsConfig._resolvedLanguagePackCoreLocation) {\n\t\t\tconst bundles = Object.create(null);\n\n\t\t\tnlsConfig.loadBundle = function (bundle, language, cb) {\n\t\t\t\tconst result = bundles[bundle];\n\t\t\t\tif (result) {\n\t\t\t\t\tcb(undefined, result);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsafeReadNlsFile(nlsConfig._resolvedLanguagePackCoreLocation, `${bundle.replace(/\\//g, '!')}.nls.json`).then(function (content) {\n\t\t\t\t\tconst json = JSON.parse(content);\n\t\t\t\t\tbundles[bundle] = json;\n\n\t\t\t\t\tcb(undefined, json);\n\t\t\t\t}).catch((error) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (nlsConfig._corruptedFile) {\n\t\t\t\t\t\t\tsafeWriteNlsFile(nlsConfig._corruptedFile, 'corrupted').catch(function (error) { console.error(error); });\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tcb(error, undefined);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\treturn nlsConfig;\n\t}\n\n\t/**\n\t * @returns {typeof import('./vs/base/parts/sandbox/electron-sandbox/globals') | undefined}\n\t */\n\tfunction safeSandboxGlobals() {\n\t\tconst globals = (typeof self === 'object' ? self : typeof global === 'object' ? global : {});\n\n\t\treturn globals.vscode;\n\t}\n\n\t/**\n\t * @returns {import('./vs/base/parts/sandbox/electron-sandbox/globals').ISandboxNodeProcess | NodeJS.Process}\n\t */\n\tfunction safeProcess() {\n\t\tconst sandboxGlobals = safeSandboxGlobals();\n\t\tif (sandboxGlobals) {\n\t\t\treturn sandboxGlobals.process; // Native environment (sandboxed)\n\t\t}\n\n\t\tif (typeof process !== 'undefined') {\n\t\t\treturn process; // Native environment (non-sandboxed)\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * @returns {import('./vs/base/parts/sandbox/electron-sandbox/electronTypes').IpcRenderer | undefined}\n\t */\n\tfunction safeIpcRenderer() {\n\t\tconst sandboxGlobals = safeSandboxGlobals();\n\t\tif (sandboxGlobals) {\n\t\t\treturn sandboxGlobals.ipcRenderer;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * @param {string[]} pathSegments\n\t * @returns {Promise<string>}\n\t */\n\tasync function safeReadNlsFile(...pathSegments) {\n\t\tconst ipcRenderer = safeIpcRenderer();\n\t\tif (ipcRenderer) {\n\t\t\treturn ipcRenderer.invoke('vscode:readNlsFile', ...pathSegments);\n\t\t}\n\n\t\tif (fs && path) {\n\t\t\treturn (await fs.promises.readFile(path.join(...pathSegments))).toString();\n\t\t}\n\n\t\tthrow new Error('Unsupported operation (read NLS files)');\n\t}\n\n\t/**\n\t * @param {string} path\n\t * @param {string} content\n\t * @returns {Promise<void>}\n\t */\n\tfunction safeWriteNlsFile(path, content) {\n\t\tconst ipcRenderer = safeIpcRenderer();\n\t\tif (ipcRenderer) {\n\t\t\treturn ipcRenderer.invoke('vscode:writeNlsFile', path, content);\n\t\t}\n\n\t\tif (fs) {\n\t\t\treturn fs.promises.writeFile(path, content);\n\t\t}\n\n\t\tthrow new Error('Unsupported operation (write NLS files)');\n\t}\n\n\t//#endregion\n\n\n\t//#region ApplicationInsights\n\n\t// Prevents appinsights from monkey patching modules.\n\t// This should be called before importing the applicationinsights module\n\tfunction avoidMonkeyPatchFromAppInsights() {\n\t\tif (typeof process === 'undefined') {\n\t\t\tconsole.warn('avoidMonkeyPatchFromAppInsights() is only available in node.js environments');\n\t\t\treturn;\n\t\t}\n\n\t\t// @ts-ignore\n\t\tprocess.env['APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL'] = true; // Skip monkey patching of 3rd party modules by appinsights\n\t\tglobal['diagnosticsSource'] = {}; // Prevents diagnostic channel (which patches \"require\") from initializing entirely\n\t}\n\n\t//#endregion\n\n\n\treturn {\n\t\tenableASARSupport,\n\t\tavoidMonkeyPatchFromAppInsights,\n\t\tsetupNLS,\n\t\tfileUriFromPath\n\t};\n}));\n"],"mappings":"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","names":[],"file":"bootstrap.js"}