#!/bin/bash
# 服务启动脚本

CURRENT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
THIS_SCRIPT="$CURRENT_DIR/$(basename $0)"

######### 服务名 主类
# 各服务独自维护 #
# APP_NAME 为服务名，与服务目录保持一致
APP_NAME="lcapCodeServer"
######### END

######### 内部变量 部署时自动替换占位符 部署完成后若调整需手动修改变量后面的值
# root 用户部署时，commonuser 占位符会替换成内置的默认普通用户或部署前修改配置文件使用指定普通用户
INNER_RUN_USER="${CW_RUN_USER}"
# 该节点通信地址
INNER_LOCAL_IP="${CW_LOCAL_IP}"
# PATH
INNER_APP_DIR="${CW_INSTALL_APP_DIR}"
INNER_LOG_DIR="${CW_INSTALL_LOGS_DIR}"
INNER_DATA_DIR="${CW_INSTALL_DATA_DIR}"
# SERVICE
INNER_SERVICE_PORT="${CW_SERVICE_PORT}"
######### END

######### 服务目录 通过内部变量自动解析
APP_HOME="${INNER_APP_DIR}/${APP_NAME}"
APP_LOG_DIR="${INNER_LOG_DIR}/${APP_NAME}"
APP_PID_FILE="${APP_HOME}/${APP_NAME}.pid"

######### 读取环境
# bash_profile 为一键部署生成的环境变量文件,位于服务安装目录下
test -f /etc/profile && . /etc/profile
test -f ${INNER_APP_DIR}/bash_profile && . ${INNER_APP_DIR}/bash_profile


######### 服务目录检查
if [ ! -d $APP_HOME ]; then
    echo "APP_HOME: $APP_HOME, Directory does not exist."
    exit 1
fi
if [ ! -d $APP_LOG_DIR ]; then
    mkdir -p $APP_LOG_DIR
fi
######### END

######### 调试模式
# -l 参数设置脚本上级目录为服务目录, -f 前台启动
opt_original=$@
opts="$(echo $opt_original | tr ' ' '\n' | grep -Ev '\-l|\-f' | tr '\n' ' ')"
if [[ "$@" == *"-l"* ]]; then
    APP_HOME="$(cd ${CURRENT_DIR}/.. &>/dev/null && pwd)"
    APP_LOG_DIR="${APP_HOME}/logs"
    mkdir -p "${APP_HOME}/pid"
    APP_PID_FILE="${APP_HOME}/pid/${APP_NAME}.pid"
    INNER_DATA_DIR="${APP_HOME}/data"
    app_local="-l"
fi
######### END

######### 执行脚本用户判断
user_id=$(id -u)
if [ ${user_id} -eq 0 ]; then
    runUser=$INNER_RUN_USER
fi
######### END

######### 服务状态检查
alive() {
    PORT_CHECK_CMD="</dev/tcp/${INNER_LOCAL_IP}/${INNER_SERVICE_PORT}"
    if $(echo ${PORT_CHECK_CMD} | bash &>/dev/null); then
        PORT_RETVAL=0
    else
        PORT_RETVAL=1
    fi
    echo $PORT_RETVAL
}
######### END

######### 服务状态输出
status() {
    if [ $(alive) -eq 0 ]; then
        echo "$APP_NAME [running]" | column -t
    else
        echo "$APP_NAME [not running]" | column -t
    fi
}
#########

######### 内部启动命令
start_inside() {
    shift
    foreground=$1
    if [ $(alive) -eq 0 ]; then
        echo "$APP_NAME [running]" | column -t
    elif [[ "$foreground" == "-f" ]]; then
        cd $APP_HOME && $JAVACMD $JVM_OPTS -classpath $CW_CLASSPATH $MAIN_CLASS
    else
        cd "$APP_HOME"
        # 具体的 node 启动命令
        ${INNER_APP_DIR}/nodejs/bin/npm run linux-start &>/dev/null
        sleep 5
        status
    fi
}
######### END

######### 启动服务
start() {
    shift
    foreground=$1
    # 判断执行脚本的用户，执行相应逻辑
    if [ ${user_id} -eq 0 ]; then
        id ${runUser} &>/dev/null
        if [ $? -ne 0 ]; then
            useradd ${runUser}
        fi
        chown -R ${runUser}.${runUser} ${APP_HOME} &>/dev/null
        chown -R ${runUser}.${runUser} ${APP_LOG_DIR} &>/dev/null
        chown -R ${runUser}.${runUser} ${INNER_DATA_DIR}/${APP_NAME} &>/dev/null
        su $runUser -c "$THIS_SCRIPT start_inside $foreground"
    elif [[ "$(uname -s)" == "Darwin" ]]; then
        $THIS_SCRIPT start_inside $foreground $app_local
    else
        $THIS_SCRIPT start_inside $foreground $app_local
    fi
}
######### END

######### 停止服务
stop() {
    if [ $(alive) -eq 0 ]; then
        cd "$APP_HOME"
        ${INNER_APP_DIR}/nodejs/bin/npm run stop &>/dev/null
    fi
    sleep 1
    status
}
######### END

######### END
main() {
    if [[ "$1" == "status" ]]; then
        port_check=1
    fi
    case $1 in
    start)
        start $@
        ;;
    start_inside)
        start_inside $@
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    status)
        status
        ;;
    *) echo "usage: $0 [-l] [start [-f]|stop|restart|status]" ;;
    esac
}
if [[ "$@" == *"-f"* ]]; then
    main $opts -f
else
    main $opts
fi