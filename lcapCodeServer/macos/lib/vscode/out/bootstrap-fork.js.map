{"version":3,"sources":["out-vscode/bootstrap-fork.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\nconst performance = require('./vs/base/common/performance');\nperformance.mark('code/fork/start');\n\nconst bootstrap = require('./bootstrap');\nconst bootstrapNode = require('./bootstrap-node');\n\n// Remove global paths from the node module lookup\nbootstrapNode.removeGlobalNodeModuleLookupPaths();\n\n// Enable ASAR in our forked processes\nbootstrap.enableASARSupport(undefined);\n\nif (process.env['VSCODE_INJECT_NODE_MODULE_LOOKUP_PATH']) {\n\tbootstrapNode.injectNodeModuleLookupPath(process.env['VSCODE_INJECT_NODE_MODULE_LOOKUP_PATH']);\n}\n\n// Configure: pipe logging to parent process\nif (!!process.send && process.env['VSCODE_PIPE_LOGGING'] === 'true') {\n\tpipeLoggingToParent();\n}\n\n// Handle Exceptions\nif (!process.env['VSCODE_HANDLES_UNCAUGHT_ERRORS']) {\n\thandleExceptions();\n}\n\n// Terminate when parent terminates\nif (process.env['VSCODE_PARENT_PID']) {\n\tterminateWhenParentTerminates();\n}\n\n// Configure Crash Reporter\nconfigureCrashReporter();\n\n// Load AMD entry point\nrequire('./bootstrap-amd').load(process.env['VSCODE_AMD_ENTRYPOINT']);\n\n\n//#region Helpers\n\nfunction pipeLoggingToParent() {\n\tconst MAX_LENGTH = 100000;\n\n\t/**\n\t * Prevent circular stringify and convert arguments to real array\n\t *\n\t * @param {IArguments} args\n\t */\n\tfunction safeToArray(args) {\n\t\tconst seen = [];\n\t\tconst argsArray = [];\n\n\t\t// Massage some arguments with special treatment\n\t\tif (args.length) {\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\n\t\t\t\t// Any argument of type 'undefined' needs to be specially treated because\n\t\t\t\t// JSON.stringify will simply ignore those. We replace them with the string\n\t\t\t\t// 'undefined' which is not 100% right, but good enough to be logged to console\n\t\t\t\tif (typeof args[i] === 'undefined') {\n\t\t\t\t\targs[i] = 'undefined';\n\t\t\t\t}\n\n\t\t\t\t// Any argument that is an Error will be changed to be just the error stack/message\n\t\t\t\t// itself because currently cannot serialize the error over entirely.\n\t\t\t\telse if (args[i] instanceof Error) {\n\t\t\t\t\tconst errorObj = args[i];\n\t\t\t\t\tif (errorObj.stack) {\n\t\t\t\t\t\targs[i] = errorObj.stack;\n\t\t\t\t\t} else {\n\t\t\t\t\t\targs[i] = errorObj.toString();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\targsArray.push(args[i]);\n\t\t\t}\n\t\t}\n\n\t\t// Add the stack trace as payload if we are told so. We remove the message and the 2 top frames\n\t\t// to start the stacktrace where the console message was being written\n\t\tif (process.env['VSCODE_LOG_STACK'] === 'true') {\n\t\t\tconst stack = new Error().stack;\n\t\t\tif (stack) {\n\t\t\t\targsArray.push({ __$stack: stack.split('\\n').slice(3).join('\\n') });\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst res = JSON.stringify(argsArray, function (key, value) {\n\n\t\t\t\t// Objects get special treatment to prevent circles\n\t\t\t\tif (isObject(value) || Array.isArray(value)) {\n\t\t\t\t\tif (seen.indexOf(value) !== -1) {\n\t\t\t\t\t\treturn '[Circular]';\n\t\t\t\t\t}\n\n\t\t\t\t\tseen.push(value);\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tif (res.length > MAX_LENGTH) {\n\t\t\t\treturn 'Output omitted for a large object that exceeds the limits';\n\t\t\t}\n\n\t\t\treturn res;\n\t\t} catch (error) {\n\t\t\treturn `Output omitted for an object that cannot be inspected ('${error.toString()}')`;\n\t\t}\n\t}\n\n\t/**\n\t * @param {{ type: string; severity: string; arguments: string; }} arg\n\t */\n\tfunction safeSend(arg) {\n\t\ttry {\n\t\t\tif (process.send) {\n\t\t\t\tprocess.send(arg);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Can happen if the parent channel is closed meanwhile\n\t\t}\n\t}\n\n\t/**\n\t * @param {unknown} obj\n\t */\n\tfunction isObject(obj) {\n\t\treturn typeof obj === 'object'\n\t\t\t&& obj !== null\n\t\t\t&& !Array.isArray(obj)\n\t\t\t&& !(obj instanceof RegExp)\n\t\t\t&& !(obj instanceof Date);\n\t}\n\n\t/**\n\t *\n\t * @param {'log' | 'warn' | 'error'} severity\n\t * @param {string} args\n\t */\n\tfunction safeSendConsoleMessage(severity, args) {\n\t\tsafeSend({ type: '__$console', severity, arguments: args });\n\t}\n\n\t/**\n\t * @param {'log' | 'info' | 'warn' | 'error'} method\n\t * @param {'log' | 'warn' | 'error'} severity\n\t */\n\tfunction wrapConsoleMethod(method, severity) {\n\t\tif (process.env['VSCODE_LOG_NATIVE'] === 'true') {\n\t\t\tconst original = console[method];\n\t\t\tconsole[method] = function () {\n\t\t\t\tsafeSendConsoleMessage(severity, safeToArray(arguments));\n\n\t\t\t\tconst stream = method === 'error' || method === 'warn' ? process.stderr : process.stdout;\n\t\t\t\tstream.write('\\nSTART_NATIVE_LOG\\n');\n\t\t\t\toriginal.apply(console, arguments);\n\t\t\t\tstream.write('\\nEND_NATIVE_LOG\\n');\n\t\t\t};\n\t\t} else {\n\t\t\tconsole[method] = function () { safeSendConsoleMessage(severity, safeToArray(arguments)); };\n\t\t}\n\t}\n\n\t// Pass console logging to the outside so that we have it in the main side if told so\n\tif (process.env['VSCODE_VERBOSE_LOGGING'] === 'true') {\n\t\twrapConsoleMethod('info', 'log');\n\t\twrapConsoleMethod('log', 'log');\n\t\twrapConsoleMethod('warn', 'warn');\n\t\twrapConsoleMethod('error', 'error');\n\t} else if (process.env['VSCODE_LOG_NATIVE'] !== 'true') {\n\t\tconsole.log = function () { /* ignore */ };\n\t\tconsole.warn = function () { /* ignore */ };\n\t\tconsole.info = function () { /* ignore */ };\n\t\twrapConsoleMethod('error', 'error');\n\t}\n}\n\nfunction handleExceptions() {\n\n\t// Handle uncaught exceptions\n\tprocess.on('uncaughtException', function (err) {\n\t\tconsole.error('Uncaught Exception: ', err);\n\t});\n\n\t// Handle unhandled promise rejections\n\tprocess.on('unhandledRejection', function (reason) {\n\t\tconsole.error('Unhandled Promise Rejection: ', reason);\n\t});\n}\n\nfunction terminateWhenParentTerminates() {\n\tconst parentPid = Number(process.env['VSCODE_PARENT_PID']);\n\n\tif (typeof parentPid === 'number' && !isNaN(parentPid)) {\n\t\tsetInterval(function () {\n\t\t\ttry {\n\t\t\t\tprocess.kill(parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t\t} catch (e) {\n\t\t\t\tprocess.exit();\n\t\t\t}\n\t\t}, 5000);\n\t}\n}\n\nfunction configureCrashReporter() {\n\tconst crashReporterOptionsRaw = process.env['VSCODE_CRASH_REPORTER_START_OPTIONS'];\n\tif (typeof crashReporterOptionsRaw === 'string') {\n\t\ttry {\n\t\t\tconst crashReporterOptions = JSON.parse(crashReporterOptionsRaw);\n\t\t\tif (crashReporterOptions && process['crashReporter'] /* Electron only */) {\n\t\t\t\tprocess['crashReporter'].start(crashReporterOptions);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}\n\n//#endregion\n"],"mappings":"aAQA,KAAM,aAAc,QAAQ,gCAC5B,YAAY,KAAK,mBAEjB,KAAM,WAAY,QAAQ,eACpB,cAAgB,QAAQ,oBAG9B,cAAc,oCAGd,UAAU,kBAAkB,QAExB,QAAQ,IAAI,uCACf,cAAc,2BAA2B,QAAQ,IAAI,uCAIlD,CAAC,CAAC,QAAQ,MAAQ,QAAQ,IAAI,sBAA2B,QAC5D,sBAII,QAAQ,IAAI,gCAChB,mBAIG,QAAQ,IAAI,mBACf,gCAID,yBAGA,QAAQ,mBAAmB,KAAK,QAAQ,IAAI,uBAK5C,+BACC,KAAM,GAAa,IAOnB,WAAqB,GACpB,KAAM,GAAO,GACP,EAAY,GAGlB,GAAI,EAAK,OACR,OAAS,GAAI,EAAG,EAAI,EAAK,OAAQ,KAKhC,GAAI,MAAO,GAAK,IAAO,YACtB,EAAK,GAAK,oBAKF,EAAK,YAAc,QAC3B,KAAM,GAAW,EAAK,GACtB,AAAI,EAAS,MACZ,EAAK,GAAK,EAAS,MAEnB,EAAK,GAAK,EAAS,WAIrB,EAAU,KAAK,EAAK,IAMtB,GAAI,QAAQ,IAAI,mBAAwB,QACvC,KAAM,GAAQ,GAAI,SAAQ,MAC1B,AAAI,GACH,EAAU,KAAK,CAAE,SAAU,EAAM,MAAM;AAAA,GAAM,MAAM,GAAG,KAAK;AAAA,KAI7D,IACC,KAAM,GAAM,KAAK,UAAU,EAAW,SAAU,EAAK,GAGpD,GAAI,EAAS,IAAU,MAAM,QAAQ,IACpC,GAAI,EAAK,QAAQ,KAAW,GAC3B,MAAO,aAGR,EAAK,KAAK,GAGX,MAAO,KAGR,MAAI,GAAI,OAAS,EACT,4DAGD,QACC,GACR,MAAO,2DAA2D,EAAM,gBAO1E,WAAkB,GACjB,IACC,AAAI,QAAQ,MACX,QAAQ,KAAK,SAEN,KAQV,WAAkB,GACjB,MAAO,OAAO,IAAQ,UAClB,IAAQ,MACR,CAAC,MAAM,QAAQ,IACf,CAAE,aAAe,UACjB,CAAE,aAAe,OAQtB,WAAgC,EAAU,GACzC,EAAS,CAAE,KAAM,aAAc,WAAU,UAAW,IAOrD,WAA2B,EAAQ,GAClC,GAAI,QAAQ,IAAI,oBAAyB,QACxC,KAAM,GAAW,QAAQ,GACzB,QAAQ,GAAU,WACjB,EAAuB,EAAU,EAAY,YAE7C,KAAM,GAAS,IAAW,SAAW,IAAW,OAAS,QAAQ,OAAS,QAAQ,OAClF,EAAO,MAAM;AAAA;AAAA,GACb,EAAS,MAAM,QAAS,WACxB,EAAO,MAAM;AAAA;AAAA,QAGd,SAAQ,GAAU,WAAc,EAAuB,EAAU,EAAY,aAK/E,AAAI,QAAQ,IAAI,yBAA8B,OAC7C,GAAkB,OAAQ,OAC1B,EAAkB,MAAO,OACzB,EAAkB,OAAQ,QAC1B,EAAkB,QAAS,UACjB,QAAQ,IAAI,oBAAyB,QAC/C,SAAQ,IAAM,aACd,QAAQ,KAAO,aACf,QAAQ,KAAO,aACf,EAAkB,QAAS,UAI7B,4BAGC,QAAQ,GAAG,oBAAqB,SAAU,GACzC,QAAQ,MAAM,uBAAwB,KAIvC,QAAQ,GAAG,qBAAsB,SAAU,GAC1C,QAAQ,MAAM,gCAAiC,KAIjD,yCACC,KAAM,GAAY,OAAO,QAAQ,IAAI,mBAErC,AAAI,MAAO,IAAc,UAAY,CAAC,MAAM,IAC3C,YAAY,WACX,IACC,QAAQ,KAAK,EAAW,SAChB,GACR,QAAQ,SAEP,KAIL,kCACC,KAAM,GAA0B,QAAQ,IAAI,oCAC5C,GAAI,MAAO,IAA4B,SACtC,IACC,KAAM,GAAuB,KAAK,MAAM,GACxC,AAAI,GAAwB,QAAQ,eACnC,QAAQ,cAAiB,MAAM,SAExB,GACR,QAAQ,MAAM","names":[],"file":"bootstrap-fork.js"}