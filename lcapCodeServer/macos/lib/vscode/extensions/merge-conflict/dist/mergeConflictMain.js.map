{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"vscode\"","webpack:///./node_modules/vscode-nls/lib/main.js","webpack:///./src/contentProvider.ts","webpack:///./src/mergeConflictMain.ts","webpack:///./src/services.ts","webpack:///./src/documentTracker.ts","webpack:///./src/mergeConflictParser.ts","webpack:///./src/documentMergeConflict.ts","webpack:///./src/delayer.ts","webpack:///./src/codelensProvider.ts","webpack:///external \"path\"","webpack:///external \"fs\"","webpack:///./src/commandHandler.ts","webpack:///./src/mergeDecorator.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","MessageFormat","LocalizeInfo","resolvedBundles","options","isPseudo","path","fs","toString","isDefined","isNumber","isString","readJsonFileSync","filename","JSON","parse","readFileSync","format","message","args","replace","length","match","rest","index","arg","replaced","String","createScopedLocalizeFunction","messages","_i","arguments","console","error","Error","stack","warn","localize","cacheBundle","bundle","loadNlsBundleOrCreateFromI18n","header","bundlePath","result","file","join","cacheRoot","id","hash","useMemoryOnly","writeBundle","encoding","flag","Date","utimes","err","code","SyntaxError","log","unlink","metaDataPath","languagePackLocation","translationsConfig","languagePack","contents","metaData","module_2","entry","translations","outDir","resultMessages","keys","messageKey","translatedMessage","undefined","push","createNLSBundle","writeFileSync","stringify","loadDefaultNlsBundle","folder","module_1","createDefaultNlsBundle","loadNlsBundle","languagePackSupport","languagePackId","translationsConfigFile","candidate","root","locale","existsSync","lastIndexOf","substring","findInTheBoxBundle","loadMessageBundle","ext","extname","substr","messageFormat","both","headerFile","dirname","parent","tryFindMetaDataHeaderFile","nlsBundle","module_3","json","resolvedLanguage","cacheLanguageResolution","resolveLanguage","Array","isArray","is","comment","process","env","VSCODE_NLS_CONFIG","vscodeOptions","toLowerCase","_languagePackSupport","_cacheRoot","_languagePackId","_translationsConfigFile","_corruptedFile","writeFile","_a","initializeSettings","config","opts","MergeConflictContentProvider","context","this","subscriptions","vscode","workspace","registerTextDocumentContentProvider","scheme","uri","ranges","query","document","openTextDocument","with","text","lastPosition","Position","forEach","rangeObj","conflictRange","fullRange","start","end","fullStart","fullEnd","getText","Range","line","character","documentEnd","lineAt","lineCount","range","ex","window","showErrorMessage","services","begin","configuration","createExtensionConfiguration","documentTracker","service","Function","onDidChangeConfiguration","configurationUpdated","workspaceConfiguration","getConfiguration","codeLensEnabled","decoratorsEnabled","enableCodeLens","enableDecorations","enableEditorOverview","disposable","dispose","ScanTask","delayTime","initialOrigin","origins","Set","add","delayTask","Delayer","has","OriginDocumentMergeConflictTracker","origin","getConflicts","isPending","forget","cache","Map","delayExpireTime","getCacheKey","Promise","resolve","getConflictsOrEmpty","cacheItem","addOrigin","set","trigger","conflicts","from","delete","task","hasOrigin","clear","_origins","MergeConflictParser","containsConflict","scanDocument","currentConflict","conflictDescriptors","isEmptyOrWhitespace","startsWith","startHeader","commonAncestors","splitter","endFooter","completeDescriptor","scanItemTolMergeConflictDescriptor","filter","Boolean","map","descriptor","DocumentMergeConflict","scanned","tokenAfterCurrentBlock","current","decoratorContent","rangeIncludingLineBreak","shiftBackOneCharacter","content","currentTokenLine","nextTokenLine","incoming","includes","unlessEqual","isEqual","type","editor","edit","applyEdit","replaceRangeWithContent","currentContent","incomingContent","concat","isNewlineOnly","defaultDelay","timeout","completionPromise","onSuccess","delay","cancelTimeout","then","setTimeout","clearTimeout","trackerService","tracker","createTracker","registerCodeLensProvider","updatedConfig","codeLensRegistrationHandle","_token","conflictsCount","commands","executeCommand","items","conflict","acceptCurrentCommand","command","title","acceptIncomingCommand","acceptBothCommand","diffCommand","CodeLens","languages","NavigationDirection","disposables","registerTextEditorCommand","acceptCurrent","acceptIncoming","acceptSelection","acceptBoth","acceptAllCurrent","acceptAllCurrentResources","acceptAllIncoming","acceptAllIncomingResources","acceptAllBoth","navigateNext","navigatePrevious","compare","cb","resourceCB","registerCommand","every","resourceUri","activeTextEditor","accept","acceptAll","resources","acceptAllResources","findConflictContainingSelection","showWarningMessage","leftRanges","rightRanges","leftUri","rightUri","mergeConflictLineOffsets","nextconflict","selection","docPath","fileName","openToTheSide","viewColumn","ViewColumn","Beside","Active","navigate","Forwards","Backwards","typeToAccept","active","isBefore","isAfter","commitEdit","direction","navigationResult","findConflictForNavigation","canNavigate","Selection","revealRange","TextEditorRevealType","Default","documents","all","resource","WorkspaceEdit","newText","contains","predicate","fallback","scanOrder","slice","reverse","decorations","decorationUsesWholeLine","updating","registerDecorationTypes","visibleTextEditors","e","applyDecorations","onDidOpenTextDocument","event","applyDecorationsFromEvent","onDidChangeTextDocument","onDidChangeVisibleTextEditors","removeDecorations","k","createTextEditorDecorationType","generateBlockRenderOptions","isWholeLine","backgroundColor","ThemeColor","color","outlineStyle","outlineWidth","outlineColor","after","contentText","overviewRulerColor","renderOptions","overviewRulerLane","OverviewRulerLane","Full","eventDocument","indexOf","matchDecorations","pushDecoration","isEmpty","commonAncestorsRegion","decorationKey","decorationType","setDecorations"],"mappings":"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","file":"mergeConflictMain.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"vscode\");","/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar path = require(\"path\");\r\nvar fs = require(\"fs\");\r\nvar toString = Object.prototype.toString;\r\nfunction isDefined(value) {\r\n    return typeof value !== 'undefined';\r\n}\r\nfunction isNumber(value) {\r\n    return toString.call(value) === '[object Number]';\r\n}\r\nfunction isString(value) {\r\n    return toString.call(value) === '[object String]';\r\n}\r\nfunction isBoolean(value) {\r\n    return value === true || value === false;\r\n}\r\nfunction readJsonFileSync(filename) {\r\n    return JSON.parse(fs.readFileSync(filename, 'utf8'));\r\n}\r\nvar MessageFormat;\r\n(function (MessageFormat) {\r\n    MessageFormat[\"file\"] = \"file\";\r\n    MessageFormat[\"bundle\"] = \"bundle\";\r\n    MessageFormat[\"both\"] = \"both\";\r\n})(MessageFormat = exports.MessageFormat || (exports.MessageFormat = {}));\r\nvar LocalizeInfo;\r\n(function (LocalizeInfo) {\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && isDefined(candidate.key) && isDefined(candidate.comment);\r\n    }\r\n    LocalizeInfo.is = is;\r\n})(LocalizeInfo || (LocalizeInfo = {}));\r\nvar resolvedLanguage;\r\nvar resolvedBundles;\r\nvar options;\r\nvar isPseudo;\r\nfunction initializeSettings() {\r\n    options = { locale: undefined, languagePackSupport: false, cacheLanguageResolution: true, messageFormat: MessageFormat.bundle };\r\n    if (isString(process.env.VSCODE_NLS_CONFIG)) {\r\n        try {\r\n            var vscodeOptions = JSON.parse(process.env.VSCODE_NLS_CONFIG);\r\n            if (isString(vscodeOptions.locale)) {\r\n                options.locale = vscodeOptions.locale.toLowerCase();\r\n            }\r\n            if (isBoolean(vscodeOptions._languagePackSupport)) {\r\n                options.languagePackSupport = vscodeOptions._languagePackSupport;\r\n            }\r\n            if (isString(vscodeOptions._cacheRoot)) {\r\n                options.cacheRoot = vscodeOptions._cacheRoot;\r\n            }\r\n            if (isString(vscodeOptions._languagePackId)) {\r\n                options.languagePackId = vscodeOptions._languagePackId;\r\n            }\r\n            if (isString(vscodeOptions._translationsConfigFile)) {\r\n                options.translationsConfigFile = vscodeOptions._translationsConfigFile;\r\n                try {\r\n                    options.translationsConfig = readJsonFileSync(options.translationsConfigFile);\r\n                }\r\n                catch (error) {\r\n                    // We can't read the translation config file. Mark the cache as corrupted.\r\n                    if (vscodeOptions._corruptedFile) {\r\n                        fs.writeFile(vscodeOptions._corruptedFile, 'corrupted', 'utf8', function (err) {\r\n                            console.error(err);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (_a) {\r\n            // Do nothing.\r\n        }\r\n    }\r\n    isPseudo = options.locale === 'pseudo';\r\n    resolvedLanguage = undefined;\r\n    resolvedBundles = Object.create(null);\r\n}\r\ninitializeSettings();\r\nfunction supportsLanguagePack() {\r\n    return options.languagePackSupport === true && options.cacheRoot !== undefined && options.languagePackId !== undefined && options.translationsConfigFile !== undefined\r\n        && options.translationsConfig !== undefined;\r\n}\r\nfunction format(message, args) {\r\n    var result;\r\n    if (isPseudo) {\r\n        // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\r\n        message = '\\uFF3B' + message.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\r\n    }\r\n    if (args.length === 0) {\r\n        result = message;\r\n    }\r\n    else {\r\n        result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\r\n            var index = rest[0];\r\n            var arg = args[index];\r\n            var replaced = match;\r\n            if (typeof arg === 'string') {\r\n                replaced = arg;\r\n            }\r\n            else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\r\n                replaced = String(arg);\r\n            }\r\n            return replaced;\r\n        });\r\n    }\r\n    return result;\r\n}\r\nfunction createScopedLocalizeFunction(messages) {\r\n    return function (key, message) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        if (isNumber(key)) {\r\n            if (key >= messages.length) {\r\n                console.error(\"Broken localize call found. Index out of bounds. Stacktrace is\\n: \" + new Error('').stack);\r\n                return;\r\n            }\r\n            return format(messages[key], args);\r\n        }\r\n        else {\r\n            if (isString(message)) {\r\n                console.warn(\"Message \" + message + \" didn't get externalized correctly.\");\r\n                return format(message, args);\r\n            }\r\n            else {\r\n                console.error(\"Broken localize call found. Stacktrace is\\n: \" + new Error('').stack);\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction localize(key, message) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    return format(message, args);\r\n}\r\nfunction resolveLanguage(file) {\r\n    var resolvedLanguage;\r\n    if (options.cacheLanguageResolution && resolvedLanguage) {\r\n        resolvedLanguage = resolvedLanguage;\r\n    }\r\n    else {\r\n        if (isPseudo || !options.locale) {\r\n            resolvedLanguage = '.nls.json';\r\n        }\r\n        else {\r\n            var locale = options.locale;\r\n            while (locale) {\r\n                var candidate = '.nls.' + locale + '.json';\r\n                if (fs.existsSync(file + candidate)) {\r\n                    resolvedLanguage = candidate;\r\n                    break;\r\n                }\r\n                else {\r\n                    var index = locale.lastIndexOf('-');\r\n                    if (index > 0) {\r\n                        locale = locale.substring(0, index);\r\n                    }\r\n                    else {\r\n                        resolvedLanguage = '.nls.json';\r\n                        locale = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (options.cacheLanguageResolution) {\r\n            resolvedLanguage = resolvedLanguage;\r\n        }\r\n    }\r\n    return file + resolvedLanguage;\r\n}\r\nfunction findInTheBoxBundle(root) {\r\n    var locale = options.locale;\r\n    while (locale) {\r\n        var candidate = path.join(root, \"nls.bundle.\" + locale + \".json\");\r\n        if (fs.existsSync(candidate)) {\r\n            return candidate;\r\n        }\r\n        else {\r\n            var index = locale.lastIndexOf('-');\r\n            if (index > 0) {\r\n                locale = locale.substring(0, index);\r\n            }\r\n            else {\r\n                locale = undefined;\r\n            }\r\n        }\r\n    }\r\n    // Test if we can reslove the default bundle.\r\n    if (locale === undefined) {\r\n        var candidate = path.join(root, 'nls.bundle.json');\r\n        if (fs.existsSync(candidate)) {\r\n            return candidate;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction mkdir(directory) {\r\n    try {\r\n        fs.mkdirSync(directory);\r\n    }\r\n    catch (err) {\r\n        if (err.code === 'EEXIST') {\r\n            return;\r\n        }\r\n        else if (err.code === 'ENOENT') {\r\n            var parent = path.dirname(directory);\r\n            if (parent !== directory) {\r\n                mkdir(parent);\r\n                fs.mkdirSync(directory);\r\n            }\r\n        }\r\n        else {\r\n            throw err;\r\n        }\r\n    }\r\n}\r\nfunction createDefaultNlsBundle(folder) {\r\n    var metaData = readJsonFileSync(path.join(folder, 'nls.metadata.json'));\r\n    var result = Object.create(null);\r\n    for (var module_1 in metaData) {\r\n        var entry = metaData[module_1];\r\n        result[module_1] = entry.messages;\r\n    }\r\n    return result;\r\n}\r\nfunction createNLSBundle(header, metaDataPath) {\r\n    var languagePackLocation = options.translationsConfig[header.id];\r\n    if (!languagePackLocation) {\r\n        return undefined;\r\n    }\r\n    var languagePack = readJsonFileSync(languagePackLocation).contents;\r\n    var metaData = readJsonFileSync(path.join(metaDataPath, 'nls.metadata.json'));\r\n    var result = Object.create(null);\r\n    for (var module_2 in metaData) {\r\n        var entry = metaData[module_2];\r\n        var translations = languagePack[header.outDir + \"/\" + module_2];\r\n        if (translations) {\r\n            var resultMessages = [];\r\n            for (var i = 0; i < entry.keys.length; i++) {\r\n                var messageKey = entry.keys[i];\r\n                var key = isString(messageKey) ? messageKey : messageKey.key;\r\n                var translatedMessage = translations[key];\r\n                if (translatedMessage === undefined) {\r\n                    translatedMessage = entry.messages[i];\r\n                }\r\n                resultMessages.push(translatedMessage);\r\n            }\r\n            result[module_2] = resultMessages;\r\n        }\r\n        else {\r\n            result[module_2] = entry.messages;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction touch(file) {\r\n    var d = new Date();\r\n    fs.utimes(file, d, d, function () {\r\n        // Do nothing. Ignore\r\n    });\r\n}\r\nfunction cacheBundle(key, bundle) {\r\n    resolvedBundles[key] = bundle;\r\n    return bundle;\r\n}\r\nfunction loadNlsBundleOrCreateFromI18n(header, bundlePath) {\r\n    var result;\r\n    var bundle = path.join(options.cacheRoot, header.id + \"-\" + header.hash + \".json\");\r\n    var useMemoryOnly = false;\r\n    var writeBundle = false;\r\n    try {\r\n        result = JSON.parse(fs.readFileSync(bundle, { encoding: 'utf8', flag: 'r' }));\r\n        touch(bundle);\r\n        return result;\r\n    }\r\n    catch (err) {\r\n        if (err.code === 'ENOENT') {\r\n            writeBundle = true;\r\n        }\r\n        else if (err instanceof SyntaxError) {\r\n            // We have a syntax error. So no valid JSON. Use\r\n            console.log(\"Syntax error parsing message bundle: \" + err.message + \".\");\r\n            fs.unlink(bundle, function (err) {\r\n                if (err) {\r\n                    console.error(\"Deleting corrupted bundle \" + bundle + \" failed.\");\r\n                }\r\n            });\r\n            useMemoryOnly = true;\r\n        }\r\n        else {\r\n            throw err;\r\n        }\r\n    }\r\n    result = createNLSBundle(header, bundlePath);\r\n    if (!result || useMemoryOnly) {\r\n        return result;\r\n    }\r\n    if (writeBundle) {\r\n        try {\r\n            fs.writeFileSync(bundle, JSON.stringify(result), { encoding: 'utf8', flag: 'wx' });\r\n        }\r\n        catch (err) {\r\n            if (err.code === 'EEXIST') {\r\n                return result;\r\n            }\r\n            throw err;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction loadDefaultNlsBundle(bundlePath) {\r\n    try {\r\n        return createDefaultNlsBundle(bundlePath);\r\n    }\r\n    catch (err) {\r\n        console.log(\"Generating default bundle from meta data failed.\", err);\r\n        return undefined;\r\n    }\r\n}\r\nfunction loadNlsBundle(header, bundlePath) {\r\n    var result;\r\n    // Core decided to use a language pack. Do the same in the extension\r\n    if (supportsLanguagePack()) {\r\n        try {\r\n            result = loadNlsBundleOrCreateFromI18n(header, bundlePath);\r\n        }\r\n        catch (err) {\r\n            console.log(\"Load or create bundle failed \", err);\r\n        }\r\n    }\r\n    if (!result) {\r\n        // No language pack found, but core is running in language pack mode\r\n        // Don't try to use old in the box bundles since the might be stale\r\n        // Fall right back to the default bundle.\r\n        if (options.languagePackSupport) {\r\n            return loadDefaultNlsBundle(bundlePath);\r\n        }\r\n        var candidate = findInTheBoxBundle(bundlePath);\r\n        if (candidate) {\r\n            try {\r\n                return readJsonFileSync(candidate);\r\n            }\r\n            catch (err) {\r\n                console.log(\"Loading in the box message bundle failed.\", err);\r\n            }\r\n        }\r\n        result = loadDefaultNlsBundle(bundlePath);\r\n    }\r\n    return result;\r\n}\r\nfunction tryFindMetaDataHeaderFile(file) {\r\n    var result;\r\n    var dirname = path.dirname(file);\r\n    while (true) {\r\n        result = path.join(dirname, 'nls.metadata.header.json');\r\n        if (fs.existsSync(result)) {\r\n            break;\r\n        }\r\n        var parent = path.dirname(dirname);\r\n        if (parent === dirname) {\r\n            result = undefined;\r\n            break;\r\n        }\r\n        else {\r\n            dirname = parent;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction loadMessageBundle(file) {\r\n    if (!file) {\r\n        // No file. We are in dev mode. Return the default\r\n        // localize function.\r\n        return localize;\r\n    }\r\n    // Remove extension since we load json files.\r\n    var ext = path.extname(file);\r\n    if (ext) {\r\n        file = file.substr(0, file.length - ext.length);\r\n    }\r\n    if (options.messageFormat === MessageFormat.both || options.messageFormat === MessageFormat.bundle) {\r\n        var headerFile = tryFindMetaDataHeaderFile(file);\r\n        if (headerFile) {\r\n            var bundlePath = path.dirname(headerFile);\r\n            var bundle = resolvedBundles[bundlePath];\r\n            if (bundle === undefined) {\r\n                try {\r\n                    var header = JSON.parse(fs.readFileSync(headerFile, 'utf8'));\r\n                    try {\r\n                        var nlsBundle = loadNlsBundle(header, bundlePath);\r\n                        bundle = cacheBundle(bundlePath, nlsBundle ? { header: header, nlsBundle: nlsBundle } : null);\r\n                    }\r\n                    catch (err) {\r\n                        console.error('Failed to load nls bundle', err);\r\n                        bundle = cacheBundle(bundlePath, null);\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.error('Failed to read header file', err);\r\n                    bundle = cacheBundle(bundlePath, null);\r\n                }\r\n            }\r\n            if (bundle) {\r\n                var module_3 = file.substr(bundlePath.length + 1).replace(/\\\\/g, '/');\r\n                var messages = bundle.nlsBundle[module_3];\r\n                if (messages === undefined) {\r\n                    console.error(\"Messages for file \" + file + \" not found. See console for details.\");\r\n                    return function () {\r\n                        return 'Messages not found.';\r\n                    };\r\n                }\r\n                return createScopedLocalizeFunction(messages);\r\n            }\r\n        }\r\n    }\r\n    if (options.messageFormat === MessageFormat.both || options.messageFormat === MessageFormat.file) {\r\n        // Try to load a single file bundle\r\n        try {\r\n            var json = readJsonFileSync(resolveLanguage(file));\r\n            if (Array.isArray(json)) {\r\n                return createScopedLocalizeFunction(json);\r\n            }\r\n            else {\r\n                if (isDefined(json.messages) && isDefined(json.keys)) {\r\n                    return createScopedLocalizeFunction(json.messages);\r\n                }\r\n                else {\r\n                    console.error(\"String bundle '\" + file + \"' uses an unsupported format.\");\r\n                    return function () {\r\n                        return 'File bundle has unsupported format. See console for details';\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        catch (err) {\r\n            if (err.code !== 'ENOENT') {\r\n                console.error('Failed to load single file bundle', err);\r\n            }\r\n        }\r\n    }\r\n    console.error(\"Failed to load message bundle for file \" + file);\r\n    return function () {\r\n        return 'Failed to load message bundle. See console for details.';\r\n    };\r\n}\r\nexports.loadMessageBundle = loadMessageBundle;\r\nfunction config(opts) {\r\n    if (opts) {\r\n        if (isString(opts.locale)) {\r\n            options.locale = opts.locale.toLowerCase();\r\n            resolvedLanguage = undefined;\r\n            resolvedBundles = Object.create(null);\r\n        }\r\n        if (opts.messageFormat !== undefined) {\r\n            options.messageFormat = opts.messageFormat;\r\n        }\r\n    }\r\n    isPseudo = options.locale === 'pseudo';\r\n    return loadMessageBundle;\r\n}\r\nexports.config = config;\r\n//# sourceMappingURL=main.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\n\nexport default class MergeConflictContentProvider implements vscode.TextDocumentContentProvider, vscode.Disposable {\n\n\tstatic scheme = 'merge-conflict.conflict-diff';\n\n\tconstructor(private context: vscode.ExtensionContext) {\n\t}\n\n\tbegin() {\n\t\tthis.context.subscriptions.push(\n\t\t\tvscode.workspace.registerTextDocumentContentProvider(MergeConflictContentProvider.scheme, this)\n\t\t);\n\t}\n\n\tdispose() {\n\t}\n\n\tasync provideTextDocumentContent(uri: vscode.Uri): Promise<string | null> {\n\t\ttry {\n\t\t\tconst { scheme, ranges } = JSON.parse(uri.query) as { scheme: string, ranges: [{ line: number, character: number }[], { line: number, character: number }[]][] };\n\n\t\t\t// complete diff\n\t\t\tconst document = await vscode.workspace.openTextDocument(uri.with({ scheme, query: '' }));\n\n\t\t\tlet text = '';\n\t\t\tlet lastPosition = new vscode.Position(0, 0);\n\n\t\t\tranges.forEach(rangeObj => {\n\t\t\t\tlet [conflictRange, fullRange] = rangeObj;\n\t\t\t\tconst [start, end] = conflictRange;\n\t\t\t\tconst [fullStart, fullEnd] = fullRange;\n\n\t\t\t\ttext += document.getText(new vscode.Range(lastPosition.line, lastPosition.character, fullStart.line, fullStart.character));\n\t\t\t\ttext += document.getText(new vscode.Range(start.line, start.character, end.line, end.character));\n\t\t\t\tlastPosition = new vscode.Position(fullEnd.line, fullEnd.character);\n\t\t\t});\n\n\t\t\tlet documentEnd = document.lineAt(document.lineCount - 1).range.end;\n\t\t\ttext += document.getText(new vscode.Range(lastPosition.line, lastPosition.character, documentEnd.line, documentEnd.character));\n\n\t\t\treturn text;\n\t\t}\n\t\tcatch (ex) {\n\t\t\tawait vscode.window.showErrorMessage('Unable to show comparison');\n\t\t\treturn null;\n\t\t}\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport MergeConflictServices from './services';\n\nexport function activate(context: vscode.ExtensionContext) {\n\t// Register disposables\n\tconst services = new MergeConflictServices(context);\n\tservices.begin();\n\tcontext.subscriptions.push(services);\n}\n\nexport function deactivate() {\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\nimport DocumentTracker from './documentTracker';\nimport CodeLensProvider from './codelensProvider';\nimport CommandHandler from './commandHandler';\nimport ContentProvider from './contentProvider';\nimport Decorator from './mergeDecorator';\nimport * as interfaces from './interfaces';\n\nconst ConfigurationSectionName = 'merge-conflict';\n\nexport default class ServiceWrapper implements vscode.Disposable {\n\n\tprivate services: vscode.Disposable[] = [];\n\n\tconstructor(private context: vscode.ExtensionContext) {\n\t}\n\n\tbegin() {\n\n\t\tlet configuration = this.createExtensionConfiguration();\n\t\tconst documentTracker = new DocumentTracker();\n\n\t\tthis.services.push(\n\t\t\tdocumentTracker,\n\t\t\tnew CommandHandler(documentTracker),\n\t\t\tnew CodeLensProvider(documentTracker),\n\t\t\tnew ContentProvider(this.context),\n\t\t\tnew Decorator(this.context, documentTracker),\n\t\t);\n\n\t\tthis.services.forEach((service: any) => {\n\t\t\tif (service.begin && service.begin instanceof Function) {\n\t\t\t\tservice.begin(configuration);\n\t\t\t}\n\t\t});\n\n\t\tvscode.workspace.onDidChangeConfiguration(() => {\n\t\t\tthis.services.forEach((service: any) => {\n\t\t\t\tif (service.configurationUpdated && service.configurationUpdated instanceof Function) {\n\t\t\t\t\tservice.configurationUpdated(this.createExtensionConfiguration());\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tcreateExtensionConfiguration(): interfaces.IExtensionConfiguration {\n\t\tconst workspaceConfiguration = vscode.workspace.getConfiguration(ConfigurationSectionName);\n\t\tconst codeLensEnabled: boolean = workspaceConfiguration.get('codeLens.enabled', true);\n\t\tconst decoratorsEnabled: boolean = workspaceConfiguration.get('decorators.enabled', true);\n\n\t\treturn {\n\t\t\tenableCodeLens: codeLensEnabled,\n\t\t\tenableDecorations: decoratorsEnabled,\n\t\t\tenableEditorOverview: decoratorsEnabled\n\t\t};\n\t}\n\n\tdispose() {\n\t\tthis.services.forEach(disposable => disposable.dispose());\n\t\tthis.services = [];\n\t}\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { MergeConflictParser } from './mergeConflictParser';\nimport * as interfaces from './interfaces';\nimport { Delayer } from './delayer';\n\nclass ScanTask {\n\tpublic origins: Set<string> = new Set<string>();\n\tpublic delayTask: Delayer<interfaces.IDocumentMergeConflict[]>;\n\n\tconstructor(delayTime: number, initialOrigin: string) {\n\t\tthis.origins.add(initialOrigin);\n\t\tthis.delayTask = new Delayer<interfaces.IDocumentMergeConflict[]>(delayTime);\n\t}\n\n\tpublic addOrigin(name: string): boolean {\n\t\tif (this.origins.has(name)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic hasOrigin(name: string): boolean {\n\t\treturn this.origins.has(name);\n\t}\n}\n\nclass OriginDocumentMergeConflictTracker implements interfaces.IDocumentMergeConflictTracker {\n\tconstructor(private parent: DocumentMergeConflictTracker, private origin: string) {\n\t}\n\n\tgetConflicts(document: vscode.TextDocument): PromiseLike<interfaces.IDocumentMergeConflict[]> {\n\t\treturn this.parent.getConflicts(document, this.origin);\n\t}\n\n\tisPending(document: vscode.TextDocument): boolean {\n\t\treturn this.parent.isPending(document, this.origin);\n\t}\n\n\tforget(document: vscode.TextDocument) {\n\t\tthis.parent.forget(document);\n\t}\n}\n\nexport default class DocumentMergeConflictTracker implements vscode.Disposable, interfaces.IDocumentMergeConflictTrackerService {\n\tprivate cache: Map<string, ScanTask> = new Map();\n\tprivate delayExpireTime: number = 0;\n\n\tgetConflicts(document: vscode.TextDocument, origin: string): PromiseLike<interfaces.IDocumentMergeConflict[]> {\n\t\t// Attempt from cache\n\n\t\tlet key = this.getCacheKey(document);\n\n\t\tif (!key) {\n\t\t\t// Document doesn't have a uri, can't cache it, so return\n\t\t\treturn Promise.resolve(this.getConflictsOrEmpty(document, [origin]));\n\t\t}\n\n\t\tlet cacheItem = this.cache.get(key);\n\t\tif (!cacheItem) {\n\t\t\tcacheItem = new ScanTask(this.delayExpireTime, origin);\n\t\t\tthis.cache.set(key, cacheItem);\n\t\t}\n\t\telse {\n\t\t\tcacheItem.addOrigin(origin);\n\t\t}\n\n\t\treturn cacheItem.delayTask.trigger(() => {\n\t\t\tlet conflicts = this.getConflictsOrEmpty(document, Array.from(cacheItem!.origins));\n\n\t\t\tif (this.cache) {\n\t\t\t\tthis.cache.delete(key!);\n\t\t\t}\n\n\t\t\treturn conflicts;\n\t\t});\n\t}\n\n\tisPending(document: vscode.TextDocument, origin: string): boolean {\n\t\tif (!document) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet key = this.getCacheKey(document);\n\t\tif (!key) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst task = this.cache.get(key);\n\t\tif (!task) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn task.hasOrigin(origin);\n\t}\n\n\tcreateTracker(origin: string): interfaces.IDocumentMergeConflictTracker {\n\t\treturn new OriginDocumentMergeConflictTracker(this, origin);\n\t}\n\n\tforget(document: vscode.TextDocument) {\n\t\tlet key = this.getCacheKey(document);\n\n\t\tif (key) {\n\t\t\tthis.cache.delete(key);\n\t\t}\n\t}\n\n\tdispose() {\n\t\tthis.cache.clear();\n\t}\n\n\tprivate getConflictsOrEmpty(document: vscode.TextDocument, _origins: string[]): interfaces.IDocumentMergeConflict[] {\n\t\tconst containsConflict = MergeConflictParser.containsConflict(document);\n\n\t\tif (!containsConflict) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst conflicts = MergeConflictParser.scanDocument(document);\n\t\treturn conflicts;\n\t}\n\n\tprivate getCacheKey(document: vscode.TextDocument): string | null {\n\t\tif (document.uri) {\n\t\t\treturn document.uri.toString();\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\nimport * as interfaces from './interfaces';\nimport { DocumentMergeConflict } from './documentMergeConflict';\n\nconst startHeaderMarker = '<<<<<<<';\nconst commonAncestorsMarker = '|||||||';\nconst splitterMarker = '=======';\nconst endFooterMarker = '>>>>>>>';\n\ninterface IScanMergedConflict {\n\tstartHeader: vscode.TextLine;\n\tcommonAncestors: vscode.TextLine[];\n\tsplitter?: vscode.TextLine;\n\tendFooter?: vscode.TextLine;\n}\n\nexport class MergeConflictParser {\n\n\tstatic scanDocument(document: vscode.TextDocument): interfaces.IDocumentMergeConflict[] {\n\n\t\t// Scan each line in the document, we already know there is at least a <<<<<<< and\n\t\t// >>>>>> marker within the document, we need to group these into conflict ranges.\n\t\t// We initially build a scan match, that references the lines of the header, splitter\n\t\t// and footer. This is then converted into a full descriptor containing all required\n\t\t// ranges.\n\n\t\tlet currentConflict: IScanMergedConflict | null = null;\n\t\tconst conflictDescriptors: interfaces.IDocumentMergeConflictDescriptor[] = [];\n\n\t\tfor (let i = 0; i < document.lineCount; i++) {\n\t\t\tconst line = document.lineAt(i);\n\n\t\t\t// Ignore empty lines\n\t\t\tif (!line || line.isEmptyOrWhitespace) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Is this a start line? <<<<<<<\n\t\t\tif (line.text.startsWith(startHeaderMarker)) {\n\t\t\t\tif (currentConflict !== null) {\n\t\t\t\t\t// Error, we should not see a startMarker before we've seen an endMarker\n\t\t\t\t\tcurrentConflict = null;\n\n\t\t\t\t\t// Give up parsing, anything matched up this to this point will be decorated\n\t\t\t\t\t// anything after will not\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Create a new conflict starting at this line\n\t\t\t\tcurrentConflict = { startHeader: line, commonAncestors: [] };\n\t\t\t}\n\t\t\t// Are we within a conflict block and is this a common ancestors marker? |||||||\n\t\t\telse if (currentConflict && !currentConflict.splitter && line.text.startsWith(commonAncestorsMarker)) {\n\t\t\t\tcurrentConflict.commonAncestors.push(line);\n\t\t\t}\n\t\t\t// Are we within a conflict block and is this a splitter? =======\n\t\t\telse if (currentConflict && !currentConflict.splitter && line.text === splitterMarker) {\n\t\t\t\tcurrentConflict.splitter = line;\n\t\t\t}\n\t\t\t// Are we within a conflict block and is this a footer? >>>>>>>\n\t\t\telse if (currentConflict && line.text.startsWith(endFooterMarker)) {\n\t\t\t\tcurrentConflict.endFooter = line;\n\n\t\t\t\t// Create a full descriptor from the lines that we matched. This can return\n\t\t\t\t// null if the descriptor could not be completed.\n\t\t\t\tlet completeDescriptor = MergeConflictParser.scanItemTolMergeConflictDescriptor(document, currentConflict);\n\n\t\t\t\tif (completeDescriptor !== null) {\n\t\t\t\t\tconflictDescriptors.push(completeDescriptor);\n\t\t\t\t}\n\n\t\t\t\t// Reset the current conflict to be empty, so we can match the next\n\t\t\t\t// starting header marker.\n\t\t\t\tcurrentConflict = null;\n\t\t\t}\n\t\t}\n\n\t\treturn conflictDescriptors\n\t\t\t.filter(Boolean)\n\t\t\t.map(descriptor => new DocumentMergeConflict(descriptor));\n\t}\n\n\tprivate static scanItemTolMergeConflictDescriptor(document: vscode.TextDocument, scanned: IScanMergedConflict): interfaces.IDocumentMergeConflictDescriptor | null {\n\t\t// Validate we have all the required lines within the scan item.\n\t\tif (!scanned.startHeader || !scanned.splitter || !scanned.endFooter) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet tokenAfterCurrentBlock: vscode.TextLine = scanned.commonAncestors[0] || scanned.splitter;\n\n\t\t// Assume that descriptor.current.header, descriptor.incoming.header and descriptor.splitter\n\t\t// have valid ranges, fill in content and total ranges from these parts.\n\t\t// NOTE: We need to shift the decorator range back one character so the splitter does not end up with\n\t\t// two decoration colors (current and splitter), if we take the new line from the content into account\n\t\t// the decorator will wrap to the next line.\n\t\treturn {\n\t\t\tcurrent: {\n\t\t\t\theader: scanned.startHeader.range,\n\t\t\t\tdecoratorContent: new vscode.Range(\n\t\t\t\t\tscanned.startHeader.rangeIncludingLineBreak.end,\n\t\t\t\t\tMergeConflictParser.shiftBackOneCharacter(document, tokenAfterCurrentBlock.range.start, scanned.startHeader.rangeIncludingLineBreak.end)),\n\t\t\t\t// Current content is range between header (shifted for linebreak) and splitter or common ancestors mark start\n\t\t\t\tcontent: new vscode.Range(\n\t\t\t\t\tscanned.startHeader.rangeIncludingLineBreak.end,\n\t\t\t\t\ttokenAfterCurrentBlock.range.start),\n\t\t\t\tname: scanned.startHeader.text.substring(startHeaderMarker.length + 1)\n\t\t\t},\n\t\t\tcommonAncestors: scanned.commonAncestors.map((currentTokenLine, index, commonAncestors) => {\n\t\t\t\tlet nextTokenLine = commonAncestors[index + 1] || scanned.splitter;\n\t\t\t\treturn {\n\t\t\t\t\theader: currentTokenLine.range,\n\t\t\t\t\tdecoratorContent: new vscode.Range(\n\t\t\t\t\t\tcurrentTokenLine.rangeIncludingLineBreak.end,\n\t\t\t\t\t\tMergeConflictParser.shiftBackOneCharacter(document, nextTokenLine.range.start, currentTokenLine.rangeIncludingLineBreak.end)),\n\t\t\t\t\t// Each common ancestors block is range between one common ancestors token\n\t\t\t\t\t// (shifted for linebreak) and start of next common ancestors token or splitter\n\t\t\t\t\tcontent: new vscode.Range(\n\t\t\t\t\t\tcurrentTokenLine.rangeIncludingLineBreak.end,\n\t\t\t\t\t\tnextTokenLine.range.start),\n\t\t\t\t\tname: currentTokenLine.text.substring(commonAncestorsMarker.length + 1)\n\t\t\t\t};\n\t\t\t}),\n\t\t\tsplitter: scanned.splitter.range,\n\t\t\tincoming: {\n\t\t\t\theader: scanned.endFooter.range,\n\t\t\t\tdecoratorContent: new vscode.Range(\n\t\t\t\t\tscanned.splitter.rangeIncludingLineBreak.end,\n\t\t\t\t\tMergeConflictParser.shiftBackOneCharacter(document, scanned.endFooter.range.start, scanned.splitter.rangeIncludingLineBreak.end)),\n\t\t\t\t// Incoming content is range between splitter (shifted for linebreak) and footer start\n\t\t\t\tcontent: new vscode.Range(\n\t\t\t\t\tscanned.splitter.rangeIncludingLineBreak.end,\n\t\t\t\t\tscanned.endFooter.range.start),\n\t\t\t\tname: scanned.endFooter.text.substring(endFooterMarker.length + 1)\n\t\t\t},\n\t\t\t// Entire range is between current header start and incoming header end (including line break)\n\t\t\trange: new vscode.Range(scanned.startHeader.range.start, scanned.endFooter.rangeIncludingLineBreak.end)\n\t\t};\n\t}\n\n\tstatic containsConflict(document: vscode.TextDocument): boolean {\n\t\tif (!document) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet text = document.getText();\n\t\treturn text.includes(startHeaderMarker) && text.includes(endFooterMarker);\n\t}\n\n\tprivate static shiftBackOneCharacter(document: vscode.TextDocument, range: vscode.Position, unlessEqual: vscode.Position): vscode.Position {\n\t\tif (range.isEqual(unlessEqual)) {\n\t\t\treturn range;\n\t\t}\n\n\t\tlet line = range.line;\n\t\tlet character = range.character - 1;\n\n\t\tif (character < 0) {\n\t\t\tline--;\n\t\t\tcharacter = document.lineAt(line).range.end.character;\n\t\t}\n\n\t\treturn new vscode.Position(line, character);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as interfaces from './interfaces';\nimport * as vscode from 'vscode';\n\nexport class DocumentMergeConflict implements interfaces.IDocumentMergeConflict {\n\n\tpublic range: vscode.Range;\n\tpublic current: interfaces.IMergeRegion;\n\tpublic incoming: interfaces.IMergeRegion;\n\tpublic commonAncestors: interfaces.IMergeRegion[];\n\tpublic splitter: vscode.Range;\n\n\tconstructor(descriptor: interfaces.IDocumentMergeConflictDescriptor) {\n\t\tthis.range = descriptor.range;\n\t\tthis.current = descriptor.current;\n\t\tthis.incoming = descriptor.incoming;\n\t\tthis.commonAncestors = descriptor.commonAncestors;\n\t\tthis.splitter = descriptor.splitter;\n\t}\n\n\tpublic commitEdit(type: interfaces.CommitType, editor: vscode.TextEditor, edit?: vscode.TextEditorEdit): Thenable<boolean> {\n\n\t\tif (edit) {\n\n\t\t\tthis.applyEdit(type, editor.document, edit);\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\treturn editor.edit((edit) => this.applyEdit(type, editor.document, edit));\n\t}\n\n\tpublic applyEdit(type: interfaces.CommitType, document: vscode.TextDocument, edit: { replace(range: vscode.Range, newText: string): void; }): void {\n\n\t\t// Each conflict is a set of ranges as follows, note placements or newlines\n\t\t// which may not in spans\n\t\t// [ Conflict Range             -- (Entire content below)\n\t\t//   [ Current Header ]\\n       -- >>>>> Header\n\t\t//   [ Current Content ]        -- (content)\n\t\t//   [ Splitter ]\\n             -- =====\n\t\t//   [ Incoming Content ]       -- (content)\n\t\t//   [ Incoming Header ]\\n      -- <<<<< Incoming\n\t\t// ]\n\t\tif (type === interfaces.CommitType.Current) {\n\t\t\t// Replace [ Conflict Range ] with [ Current Content ]\n\t\t\tlet content = document.getText(this.current.content);\n\t\t\tthis.replaceRangeWithContent(content, edit);\n\t\t}\n\t\telse if (type === interfaces.CommitType.Incoming) {\n\t\t\tlet content = document.getText(this.incoming.content);\n\t\t\tthis.replaceRangeWithContent(content, edit);\n\t\t}\n\t\telse if (type === interfaces.CommitType.Both) {\n\t\t\t// Replace [ Conflict Range ] with [ Current Content ] + \\n + [ Incoming Content ]\n\n\t\t\tconst currentContent = document.getText(this.current.content);\n\t\t\tconst incomingContent = document.getText(this.incoming.content);\n\n\t\t\tedit.replace(this.range, currentContent.concat(incomingContent));\n\t\t}\n\t}\n\n\tprivate replaceRangeWithContent(content: string, edit: { replace(range: vscode.Range, newText: string): void; }) {\n\t\tif (this.isNewlineOnly(content)) {\n\t\t\tedit.replace(this.range, '');\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace [ Conflict Range ] with [ Current Content ]\n\t\tedit.replace(this.range, content);\n\t}\n\n\tprivate isNewlineOnly(text: string) {\n\t\treturn text === '\\n' || text === '\\r\\n';\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface ITask<T> {\n\t(): T;\n}\n\nexport class Delayer<T> {\n\n\tpublic defaultDelay: number;\n\tprivate timeout: any; // Timer\n\tprivate completionPromise: Promise<T> | null;\n\tprivate onSuccess: ((value: T | PromiseLike<T> | undefined) => void) | null;\n\tprivate task: ITask<T> | null;\n\n\tconstructor(defaultDelay: number) {\n\t\tthis.defaultDelay = defaultDelay;\n\t\tthis.timeout = null;\n\t\tthis.completionPromise = null;\n\t\tthis.onSuccess = null;\n\t\tthis.task = null;\n\t}\n\n\tpublic trigger(task: ITask<T>, delay: number = this.defaultDelay): Promise<T> {\n\t\tthis.task = task;\n\t\tif (delay >= 0) {\n\t\t\tthis.cancelTimeout();\n\t\t}\n\n\t\tif (!this.completionPromise) {\n\t\t\tthis.completionPromise = new Promise<T | undefined>((resolve) => {\n\t\t\t\tthis.onSuccess = resolve;\n\t\t\t}).then(() => {\n\t\t\t\tthis.completionPromise = null;\n\t\t\t\tthis.onSuccess = null;\n\t\t\t\tlet result = this.task!();\n\t\t\t\tthis.task = null;\n\t\t\t\treturn result;\n\t\t\t});\n\t\t}\n\n\t\tif (delay >= 0 || this.timeout === null) {\n\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\tthis.timeout = null;\n\t\t\t\tthis.onSuccess!(undefined);\n\t\t\t}, delay >= 0 ? delay : this.defaultDelay);\n\t\t}\n\n\t\treturn this.completionPromise;\n\t}\n\n\tpublic forceDelivery(): Promise<T> | null {\n\t\tif (!this.completionPromise) {\n\t\t\treturn null;\n\t\t}\n\t\tthis.cancelTimeout();\n\t\tlet result = this.completionPromise;\n\t\tthis.onSuccess!(undefined);\n\t\treturn result;\n\t}\n\n\tpublic isTriggered(): boolean {\n\t\treturn this.timeout !== null;\n\t}\n\n\tpublic cancel(): void {\n\t\tthis.cancelTimeout();\n\t\tthis.completionPromise = null;\n\t}\n\n\tprivate cancelTimeout(): void {\n\t\tif (this.timeout !== null) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport * as interfaces from './interfaces';\nimport { loadMessageBundle } from 'vscode-nls';\nconst localize = loadMessageBundle();\n\nexport default class MergeConflictCodeLensProvider implements vscode.CodeLensProvider, vscode.Disposable {\n\tprivate codeLensRegistrationHandle?: vscode.Disposable | null;\n\tprivate config?: interfaces.IExtensionConfiguration;\n\tprivate tracker: interfaces.IDocumentMergeConflictTracker;\n\n\tconstructor(trackerService: interfaces.IDocumentMergeConflictTrackerService) {\n\t\tthis.tracker = trackerService.createTracker('codelens');\n\t}\n\n\tbegin(config: interfaces.IExtensionConfiguration) {\n\t\tthis.config = config;\n\n\t\tif (this.config.enableCodeLens) {\n\t\t\tthis.registerCodeLensProvider();\n\t\t}\n\t}\n\n\tconfigurationUpdated(updatedConfig: interfaces.IExtensionConfiguration) {\n\n\t\tif (updatedConfig.enableCodeLens === false && this.codeLensRegistrationHandle) {\n\t\t\tthis.codeLensRegistrationHandle.dispose();\n\t\t\tthis.codeLensRegistrationHandle = null;\n\t\t}\n\t\telse if (updatedConfig.enableCodeLens === true && !this.codeLensRegistrationHandle) {\n\t\t\tthis.registerCodeLensProvider();\n\t\t}\n\n\t\tthis.config = updatedConfig;\n\t}\n\n\n\tdispose() {\n\t\tif (this.codeLensRegistrationHandle) {\n\t\t\tthis.codeLensRegistrationHandle.dispose();\n\t\t\tthis.codeLensRegistrationHandle = null;\n\t\t}\n\t}\n\n\tasync provideCodeLenses(document: vscode.TextDocument, _token: vscode.CancellationToken): Promise<vscode.CodeLens[] | null> {\n\n\t\tif (!this.config || !this.config.enableCodeLens) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet conflicts = await this.tracker.getConflicts(document);\n\t\tconst conflictsCount = conflicts?.length ?? 0;\n\t\tvscode.commands.executeCommand('setContext', 'mergeConflictsCount', conflictsCount);\n\n\t\tif (!conflictsCount) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet items: vscode.CodeLens[] = [];\n\n\t\tconflicts.forEach(conflict => {\n\t\t\tlet acceptCurrentCommand: vscode.Command = {\n\t\t\t\tcommand: 'merge-conflict.accept.current',\n\t\t\t\ttitle: localize('acceptCurrentChange', 'Accept Current Change'),\n\t\t\t\targuments: ['known-conflict', conflict]\n\t\t\t};\n\n\t\t\tlet acceptIncomingCommand: vscode.Command = {\n\t\t\t\tcommand: 'merge-conflict.accept.incoming',\n\t\t\t\ttitle: localize('acceptIncomingChange', 'Accept Incoming Change'),\n\t\t\t\targuments: ['known-conflict', conflict]\n\t\t\t};\n\n\t\t\tlet acceptBothCommand: vscode.Command = {\n\t\t\t\tcommand: 'merge-conflict.accept.both',\n\t\t\t\ttitle: localize('acceptBothChanges', 'Accept Both Changes'),\n\t\t\t\targuments: ['known-conflict', conflict]\n\t\t\t};\n\n\t\t\tlet diffCommand: vscode.Command = {\n\t\t\t\tcommand: 'merge-conflict.compare',\n\t\t\t\ttitle: localize('compareChanges', 'Compare Changes'),\n\t\t\t\targuments: [conflict]\n\t\t\t};\n\n\t\t\titems.push(\n\t\t\t\tnew vscode.CodeLens(conflict.range, acceptCurrentCommand),\n\t\t\t\tnew vscode.CodeLens(conflict.range.with(conflict.range.start.with({ character: conflict.range.start.character + 1 })), acceptIncomingCommand),\n\t\t\t\tnew vscode.CodeLens(conflict.range.with(conflict.range.start.with({ character: conflict.range.start.character + 2 })), acceptBothCommand),\n\t\t\t\tnew vscode.CodeLens(conflict.range.with(conflict.range.start.with({ character: conflict.range.start.character + 3 })), diffCommand)\n\t\t\t);\n\t\t});\n\n\t\treturn items;\n\t}\n\n\tprivate registerCodeLensProvider() {\n\t\tthis.codeLensRegistrationHandle = vscode.languages.registerCodeLensProvider([\n\t\t\t{ scheme: 'file' },\n\t\t\t{ scheme: 'vscode-vfs' },\n\t\t\t{ scheme: 'untitled' },\n\t\t\t{ scheme: 'vscode-userdata' },\n\t\t], this);\n\t}\n}\n","module.exports = require(\"path\");","module.exports = require(\"fs\");","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\nimport * as interfaces from './interfaces';\nimport ContentProvider from './contentProvider';\nimport { loadMessageBundle } from 'vscode-nls';\nconst localize = loadMessageBundle();\n\ninterface IDocumentMergeConflictNavigationResults {\n\tcanNavigate: boolean;\n\tconflict?: interfaces.IDocumentMergeConflict;\n}\n\nenum NavigationDirection {\n\tForwards,\n\tBackwards\n}\n\nexport default class CommandHandler implements vscode.Disposable {\n\n\tprivate disposables: vscode.Disposable[] = [];\n\tprivate tracker: interfaces.IDocumentMergeConflictTracker;\n\n\tconstructor(trackerService: interfaces.IDocumentMergeConflictTrackerService) {\n\t\tthis.tracker = trackerService.createTracker('commands');\n\t}\n\n\tbegin() {\n\t\tthis.disposables.push(\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.current', this.acceptCurrent),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.incoming', this.acceptIncoming),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.selection', this.acceptSelection),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.both', this.acceptBoth),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.all-current', this.acceptAllCurrent, this.acceptAllCurrentResources),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.all-incoming', this.acceptAllIncoming, this.acceptAllIncomingResources),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.all-both', this.acceptAllBoth),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.next', this.navigateNext),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.previous', this.navigatePrevious),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.compare', this.compare)\n\t\t);\n\t}\n\n\tprivate registerTextEditorCommand(command: string, cb: (editor: vscode.TextEditor, ...args: any[]) => Promise<void>, resourceCB?: (uris: vscode.Uri[]) => Promise<void>) {\n\t\treturn vscode.commands.registerCommand(command, (...args) => {\n\t\t\tif (resourceCB && args.length && args.every(arg => arg && arg.resourceUri)) {\n\t\t\t\treturn resourceCB.call(this, args.map(arg => arg.resourceUri));\n\t\t\t}\n\t\t\tconst editor = vscode.window.activeTextEditor;\n\t\t\treturn editor && cb.call(this, editor, ...args);\n\t\t});\n\t}\n\n\tacceptCurrent(editor: vscode.TextEditor, ...args: any[]): Promise<void> {\n\t\treturn this.accept(interfaces.CommitType.Current, editor, ...args);\n\t}\n\n\tacceptIncoming(editor: vscode.TextEditor, ...args: any[]): Promise<void> {\n\t\treturn this.accept(interfaces.CommitType.Incoming, editor, ...args);\n\t}\n\n\tacceptBoth(editor: vscode.TextEditor, ...args: any[]): Promise<void> {\n\t\treturn this.accept(interfaces.CommitType.Both, editor, ...args);\n\t}\n\n\tacceptAllCurrent(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.acceptAll(interfaces.CommitType.Current, editor);\n\t}\n\n\tacceptAllIncoming(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.acceptAll(interfaces.CommitType.Incoming, editor);\n\t}\n\n\tacceptAllCurrentResources(resources: vscode.Uri[]): Promise<void> {\n\t\treturn this.acceptAllResources(interfaces.CommitType.Current, resources);\n\t}\n\n\tacceptAllIncomingResources(resources: vscode.Uri[]): Promise<void> {\n\t\treturn this.acceptAllResources(interfaces.CommitType.Incoming, resources);\n\t}\n\n\tacceptAllBoth(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.acceptAll(interfaces.CommitType.Both, editor);\n\t}\n\n\tasync compare(editor: vscode.TextEditor, conflict: interfaces.IDocumentMergeConflict | null) {\n\n\t\t// No conflict, command executed from command palette\n\t\tif (!conflict) {\n\t\t\tconflict = await this.findConflictContainingSelection(editor);\n\n\t\t\t// Still failed to find conflict, warn the user and exit\n\t\t\tif (!conflict) {\n\t\t\t\tvscode.window.showWarningMessage(localize('cursorNotInConflict', 'Editor cursor is not within a merge conflict'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst conflicts = await this.tracker.getConflicts(editor.document);\n\n\t\t// Still failed to find conflict, warn the user and exit\n\t\tif (!conflicts) {\n\t\t\tvscode.window.showWarningMessage(localize('cursorNotInConflict', 'Editor cursor is not within a merge conflict'));\n\t\t\treturn;\n\t\t}\n\n\t\tconst scheme = editor.document.uri.scheme;\n\t\tlet range = conflict.current.content;\n\t\tlet leftRanges = conflicts.map(conflict => [conflict.current.content, conflict.range]);\n\t\tlet rightRanges = conflicts.map(conflict => [conflict.incoming.content, conflict.range]);\n\n\t\tconst leftUri = editor.document.uri.with({\n\t\t\tscheme: ContentProvider.scheme,\n\t\t\tquery: JSON.stringify({ scheme, range: range, ranges: leftRanges })\n\t\t});\n\n\n\t\trange = conflict.incoming.content;\n\t\tconst rightUri = leftUri.with({ query: JSON.stringify({ scheme, ranges: rightRanges }) });\n\n\t\tlet mergeConflictLineOffsets = 0;\n\t\tfor (let nextconflict of conflicts) {\n\t\t\tif (nextconflict.range.isEqual(conflict.range)) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tmergeConflictLineOffsets += (nextconflict.range.end.line - nextconflict.range.start.line) - (nextconflict.incoming.content.end.line - nextconflict.incoming.content.start.line);\n\t\t\t}\n\t\t}\n\t\tconst selection = new vscode.Range(\n\t\t\tconflict.range.start.line - mergeConflictLineOffsets, conflict.range.start.character,\n\t\t\tconflict.range.start.line - mergeConflictLineOffsets, conflict.range.start.character\n\t\t);\n\n\t\tconst docPath = editor.document.uri.path;\n\t\tconst fileName = docPath.substring(docPath.lastIndexOf('/') + 1); // avoid NodeJS path to keep browser webpack small\n\t\tconst title = localize('compareChangesTitle', '{0}: Current Changes ⟷ Incoming Changes', fileName);\n\t\tconst mergeConflictConfig = vscode.workspace.getConfiguration('merge-conflict');\n\t\tconst openToTheSide = mergeConflictConfig.get<string>('diffViewPosition');\n\t\tconst opts: vscode.TextDocumentShowOptions = {\n\t\t\tviewColumn: openToTheSide === 'Beside' ? vscode.ViewColumn.Beside : vscode.ViewColumn.Active,\n\t\t\tselection\n\t\t};\n\n\t\tif (openToTheSide === 'Below') {\n\t\t\tawait vscode.commands.executeCommand('workbench.action.newGroupBelow');\n\t\t}\n\n\t\tawait vscode.commands.executeCommand('vscode.diff', leftUri, rightUri, title, opts);\n\t}\n\n\tnavigateNext(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.navigate(editor, NavigationDirection.Forwards);\n\t}\n\n\tnavigatePrevious(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.navigate(editor, NavigationDirection.Backwards);\n\t}\n\n\tasync acceptSelection(editor: vscode.TextEditor): Promise<void> {\n\t\tlet conflict = await this.findConflictContainingSelection(editor);\n\n\t\tif (!conflict) {\n\t\t\tvscode.window.showWarningMessage(localize('cursorNotInConflict', 'Editor cursor is not within a merge conflict'));\n\t\t\treturn;\n\t\t}\n\n\t\tlet typeToAccept: interfaces.CommitType;\n\t\tlet tokenAfterCurrentBlock: vscode.Range = conflict.splitter;\n\n\t\tif (conflict.commonAncestors.length > 0) {\n\t\t\ttokenAfterCurrentBlock = conflict.commonAncestors[0].header;\n\t\t}\n\n\t\t// Figure out if the cursor is in current or incoming, we do this by seeing if\n\t\t// the active position is before or after the range of the splitter or common\n\t\t// ancestors marker. We can use this trick as the previous check in\n\t\t// findConflictByActiveSelection will ensure it's within the conflict range, so\n\t\t// we don't falsely identify \"current\" or \"incoming\" if outside of a conflict range.\n\t\tif (editor.selection.active.isBefore(tokenAfterCurrentBlock.start)) {\n\t\t\ttypeToAccept = interfaces.CommitType.Current;\n\t\t}\n\t\telse if (editor.selection.active.isAfter(conflict.splitter.end)) {\n\t\t\ttypeToAccept = interfaces.CommitType.Incoming;\n\t\t}\n\t\telse if (editor.selection.active.isBefore(conflict.splitter.start)) {\n\t\t\tvscode.window.showWarningMessage(localize('cursorOnCommonAncestorsRange', 'Editor cursor is within the common ancestors block, please move it to either the \"current\" or \"incoming\" block'));\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tvscode.window.showWarningMessage(localize('cursorOnSplitterRange', 'Editor cursor is within the merge conflict splitter, please move it to either the \"current\" or \"incoming\" block'));\n\t\t\treturn;\n\t\t}\n\n\t\tthis.tracker.forget(editor.document);\n\t\tconflict.commitEdit(typeToAccept, editor);\n\t}\n\n\tdispose() {\n\t\tthis.disposables.forEach(disposable => disposable.dispose());\n\t\tthis.disposables = [];\n\t}\n\n\tprivate async navigate(editor: vscode.TextEditor, direction: NavigationDirection): Promise<void> {\n\t\tlet navigationResult = await this.findConflictForNavigation(editor, direction);\n\n\t\tif (!navigationResult) {\n\t\t\t// Check for autoNavigateNextConflict, if it's enabled(which indicating no conflict remain), then do not show warning\n\t\t\tconst mergeConflictConfig = vscode.workspace.getConfiguration('merge-conflict');\n\t\t\tif (mergeConflictConfig.get<boolean>('autoNavigateNextConflict.enabled')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvscode.window.showWarningMessage(localize('noConflicts', 'No merge conflicts found in this file'));\n\t\t\treturn;\n\t\t}\n\t\telse if (!navigationResult.canNavigate) {\n\t\t\tvscode.window.showWarningMessage(localize('noOtherConflictsInThisFile', 'No other merge conflicts within this file'));\n\t\t\treturn;\n\t\t}\n\t\telse if (!navigationResult.conflict) {\n\t\t\t// TODO: Show error message?\n\t\t\treturn;\n\t\t}\n\n\t\t// Move the selection to the first line of the conflict\n\t\teditor.selection = new vscode.Selection(navigationResult.conflict.range.start, navigationResult.conflict.range.start);\n\t\teditor.revealRange(navigationResult.conflict.range, vscode.TextEditorRevealType.Default);\n\t}\n\n\tprivate async accept(type: interfaces.CommitType, editor: vscode.TextEditor, ...args: any[]): Promise<void> {\n\n\t\tlet conflict: interfaces.IDocumentMergeConflict | null;\n\n\t\t// If launched with known context, take the conflict from that\n\t\tif (args[0] === 'known-conflict') {\n\t\t\tconflict = args[1];\n\t\t}\n\t\telse {\n\t\t\t// Attempt to find a conflict that matches the current cursor position\n\t\t\tconflict = await this.findConflictContainingSelection(editor);\n\t\t}\n\n\t\tif (!conflict) {\n\t\t\tvscode.window.showWarningMessage(localize('cursorNotInConflict', 'Editor cursor is not within a merge conflict'));\n\t\t\treturn;\n\t\t}\n\n\t\t// Tracker can forget as we know we are going to do an edit\n\t\tthis.tracker.forget(editor.document);\n\t\tconflict.commitEdit(type, editor);\n\n\t\t// navigate to the next merge conflict\n\t\tconst mergeConflictConfig = vscode.workspace.getConfiguration('merge-conflict');\n\t\tif (mergeConflictConfig.get<boolean>('autoNavigateNextConflict.enabled')) {\n\t\t\tthis.navigateNext(editor);\n\t\t}\n\n\t}\n\n\tprivate async acceptAll(type: interfaces.CommitType, editor: vscode.TextEditor): Promise<void> {\n\t\tlet conflicts = await this.tracker.getConflicts(editor.document);\n\n\t\tif (!conflicts || conflicts.length === 0) {\n\t\t\tvscode.window.showWarningMessage(localize('noConflicts', 'No merge conflicts found in this file'));\n\t\t\treturn;\n\t\t}\n\n\t\t// For get the current state of the document, as we know we are doing to do a large edit\n\t\tthis.tracker.forget(editor.document);\n\n\t\t// Apply all changes as one edit\n\t\tawait editor.edit((edit) => conflicts.forEach(conflict => {\n\t\t\tconflict.applyEdit(type, editor.document, edit);\n\t\t}));\n\t}\n\n\tprivate async acceptAllResources(type: interfaces.CommitType, resources: vscode.Uri[]): Promise<void> {\n\t\tconst documents = await Promise.all(resources.map(resource => vscode.workspace.openTextDocument(resource)));\n\t\tconst edit = new vscode.WorkspaceEdit();\n\t\tfor (const document of documents) {\n\t\t\tconst conflicts = await this.tracker.getConflicts(document);\n\n\t\t\tif (!conflicts || conflicts.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// For get the current state of the document, as we know we are doing to do a large edit\n\t\t\tthis.tracker.forget(document);\n\n\t\t\t// Apply all changes as one edit\n\t\t\tconflicts.forEach(conflict => {\n\t\t\t\tconflict.applyEdit(type, document, { replace: (range, newText) => edit.replace(document.uri, range, newText) });\n\t\t\t});\n\t\t}\n\t\tvscode.workspace.applyEdit(edit);\n\t}\n\n\tprivate async findConflictContainingSelection(editor: vscode.TextEditor, conflicts?: interfaces.IDocumentMergeConflict[]): Promise<interfaces.IDocumentMergeConflict | null> {\n\n\t\tif (!conflicts) {\n\t\t\tconflicts = await this.tracker.getConflicts(editor.document);\n\t\t}\n\n\t\tif (!conflicts || conflicts.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfor (const conflict of conflicts) {\n\t\t\tif (conflict.range.contains(editor.selection.active)) {\n\t\t\t\treturn conflict;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate async findConflictForNavigation(editor: vscode.TextEditor, direction: NavigationDirection, conflicts?: interfaces.IDocumentMergeConflict[]): Promise<IDocumentMergeConflictNavigationResults | null> {\n\t\tif (!conflicts) {\n\t\t\tconflicts = await this.tracker.getConflicts(editor.document);\n\t\t}\n\n\t\tif (!conflicts || conflicts.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet selection = editor.selection.active;\n\t\tif (conflicts.length === 1) {\n\t\t\tif (conflicts[0].range.contains(selection)) {\n\t\t\t\treturn {\n\t\t\t\t\tcanNavigate: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tcanNavigate: true,\n\t\t\t\tconflict: conflicts[0]\n\t\t\t};\n\t\t}\n\n\t\tlet predicate: (_conflict: any) => boolean;\n\t\tlet fallback: () => interfaces.IDocumentMergeConflict;\n\t\tlet scanOrder: interfaces.IDocumentMergeConflict[];\n\n\t\tif (direction === NavigationDirection.Forwards) {\n\t\t\tpredicate = (conflict) => selection.isBefore(conflict.range.start);\n\t\t\tfallback = () => conflicts![0];\n\t\t\tscanOrder = conflicts;\n\t\t} else if (direction === NavigationDirection.Backwards) {\n\t\t\tpredicate = (conflict) => selection.isAfter(conflict.range.start);\n\t\t\tfallback = () => conflicts![conflicts!.length - 1];\n\t\t\tscanOrder = conflicts.slice().reverse();\n\t\t} else {\n\t\t\tthrow new Error(`Unsupported direction ${direction}`);\n\t\t}\n\n\t\tfor (const conflict of scanOrder) {\n\t\t\tif (predicate(conflict) && !conflict.range.contains(selection)) {\n\t\t\t\treturn {\n\t\t\t\t\tcanNavigate: true,\n\t\t\t\t\tconflict: conflict\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Went all the way to the end, return the head\n\t\treturn {\n\t\t\tcanNavigate: true,\n\t\t\tconflict: fallback()\n\t\t};\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\nimport * as interfaces from './interfaces';\nimport { loadMessageBundle } from 'vscode-nls';\nconst localize = loadMessageBundle();\n\nexport default class MergeDecorator implements vscode.Disposable {\n\n\tprivate decorations: { [key: string]: vscode.TextEditorDecorationType } = {};\n\n\tprivate decorationUsesWholeLine: boolean = true; // Useful for debugging, set to false to see exact match ranges\n\n\tprivate config?: interfaces.IExtensionConfiguration;\n\tprivate tracker: interfaces.IDocumentMergeConflictTracker;\n\tprivate updating = new Map<vscode.TextEditor, boolean>();\n\n\tconstructor(private context: vscode.ExtensionContext, trackerService: interfaces.IDocumentMergeConflictTrackerService) {\n\t\tthis.tracker = trackerService.createTracker('decorator');\n\t}\n\n\tbegin(config: interfaces.IExtensionConfiguration) {\n\t\tthis.config = config;\n\t\tthis.registerDecorationTypes(config);\n\n\t\t// Check if we already have a set of active windows, attempt to track these.\n\t\tvscode.window.visibleTextEditors.forEach(e => this.applyDecorations(e));\n\n\t\tvscode.workspace.onDidOpenTextDocument(event => {\n\t\t\tthis.applyDecorationsFromEvent(event);\n\t\t}, null, this.context.subscriptions);\n\n\t\tvscode.workspace.onDidChangeTextDocument(event => {\n\t\t\tthis.applyDecorationsFromEvent(event.document);\n\t\t}, null, this.context.subscriptions);\n\n\t\tvscode.window.onDidChangeVisibleTextEditors((e) => {\n\t\t\t// Any of which could be new (not just the active one).\n\t\t\te.forEach(e => this.applyDecorations(e));\n\t\t}, null, this.context.subscriptions);\n\t}\n\n\tconfigurationUpdated(config: interfaces.IExtensionConfiguration) {\n\t\tthis.config = config;\n\t\tthis.registerDecorationTypes(config);\n\n\t\t// Re-apply the decoration\n\t\tvscode.window.visibleTextEditors.forEach(e => {\n\t\t\tthis.removeDecorations(e);\n\t\t\tthis.applyDecorations(e);\n\t\t});\n\t}\n\n\tprivate registerDecorationTypes(config: interfaces.IExtensionConfiguration) {\n\n\t\t// Dispose of existing decorations\n\t\tObject.keys(this.decorations).forEach(k => this.decorations[k].dispose());\n\t\tthis.decorations = {};\n\n\t\t// None of our features are enabled\n\t\tif (!config.enableDecorations || !config.enableEditorOverview) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Create decorators\n\t\tif (config.enableDecorations || config.enableEditorOverview) {\n\t\t\tthis.decorations['current.content'] = vscode.window.createTextEditorDecorationType(\n\t\t\t\tthis.generateBlockRenderOptions('merge.currentContentBackground', 'editorOverviewRuler.currentContentForeground', config)\n\t\t\t);\n\n\t\t\tthis.decorations['incoming.content'] = vscode.window.createTextEditorDecorationType(\n\t\t\t\tthis.generateBlockRenderOptions('merge.incomingContentBackground', 'editorOverviewRuler.incomingContentForeground', config)\n\t\t\t);\n\n\t\t\tthis.decorations['commonAncestors.content'] = vscode.window.createTextEditorDecorationType(\n\t\t\t\tthis.generateBlockRenderOptions('merge.commonContentBackground', 'editorOverviewRuler.commonContentForeground', config)\n\t\t\t);\n\t\t}\n\n\t\tif (config.enableDecorations) {\n\t\t\tthis.decorations['current.header'] = vscode.window.createTextEditorDecorationType({\n\t\t\t\tisWholeLine: this.decorationUsesWholeLine,\n\t\t\t\tbackgroundColor: new vscode.ThemeColor('merge.currentHeaderBackground'),\n\t\t\t\tcolor: new vscode.ThemeColor('editor.foreground'),\n\t\t\t\toutlineStyle: 'solid',\n\t\t\t\toutlineWidth: '1pt',\n\t\t\t\toutlineColor: new vscode.ThemeColor('merge.border'),\n\t\t\t\tafter: {\n\t\t\t\t\tcontentText: ' ' + localize('currentChange', '(Current Change)'),\n\t\t\t\t\tcolor: new vscode.ThemeColor('descriptionForeground')\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.decorations['commonAncestors.header'] = vscode.window.createTextEditorDecorationType({\n\t\t\t\tisWholeLine: this.decorationUsesWholeLine,\n\t\t\t\tbackgroundColor: new vscode.ThemeColor('merge.commonHeaderBackground'),\n\t\t\t\tcolor: new vscode.ThemeColor('editor.foreground'),\n\t\t\t\toutlineStyle: 'solid',\n\t\t\t\toutlineWidth: '1pt',\n\t\t\t\toutlineColor: new vscode.ThemeColor('merge.border')\n\t\t\t});\n\n\t\t\tthis.decorations['splitter'] = vscode.window.createTextEditorDecorationType({\n\t\t\t\tcolor: new vscode.ThemeColor('editor.foreground'),\n\t\t\t\toutlineStyle: 'solid',\n\t\t\t\toutlineWidth: '1pt',\n\t\t\t\toutlineColor: new vscode.ThemeColor('merge.border'),\n\t\t\t\tisWholeLine: this.decorationUsesWholeLine,\n\t\t\t});\n\n\t\t\tthis.decorations['incoming.header'] = vscode.window.createTextEditorDecorationType({\n\t\t\t\tbackgroundColor: new vscode.ThemeColor('merge.incomingHeaderBackground'),\n\t\t\t\tcolor: new vscode.ThemeColor('editor.foreground'),\n\t\t\t\toutlineStyle: 'solid',\n\t\t\t\toutlineWidth: '1pt',\n\t\t\t\toutlineColor: new vscode.ThemeColor('merge.border'),\n\t\t\t\tisWholeLine: this.decorationUsesWholeLine,\n\t\t\t\tafter: {\n\t\t\t\t\tcontentText: ' ' + localize('incomingChange', '(Incoming Change)'),\n\t\t\t\t\tcolor: new vscode.ThemeColor('descriptionForeground')\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tdispose() {\n\n\t\t// TODO: Replace with Map<string, T>\n\t\tObject.keys(this.decorations).forEach(name => {\n\t\t\tthis.decorations[name].dispose();\n\t\t});\n\n\t\tthis.decorations = {};\n\t}\n\n\tprivate generateBlockRenderOptions(backgroundColor: string, overviewRulerColor: string, config: interfaces.IExtensionConfiguration): vscode.DecorationRenderOptions {\n\n\t\tlet renderOptions: vscode.DecorationRenderOptions = {};\n\n\t\tif (config.enableDecorations) {\n\t\t\trenderOptions.backgroundColor = new vscode.ThemeColor(backgroundColor);\n\t\t\trenderOptions.isWholeLine = this.decorationUsesWholeLine;\n\t\t}\n\n\t\tif (config.enableEditorOverview) {\n\t\t\trenderOptions.overviewRulerColor = new vscode.ThemeColor(overviewRulerColor);\n\t\t\trenderOptions.overviewRulerLane = vscode.OverviewRulerLane.Full;\n\t\t}\n\n\t\treturn renderOptions;\n\t}\n\n\tprivate applyDecorationsFromEvent(eventDocument: vscode.TextDocument) {\n\t\tfor (const editor of vscode.window.visibleTextEditors) {\n\t\t\tif (editor.document === eventDocument) {\n\t\t\t\t// Attempt to apply\n\t\t\t\tthis.applyDecorations(editor);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async applyDecorations(editor: vscode.TextEditor) {\n\t\tif (!editor || !editor.document) { return; }\n\n\t\tif (!this.config || (!this.config.enableDecorations && !this.config.enableEditorOverview)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If we have a pending scan from the same origin, exit early. (Cannot use this.tracker.isPending() because decorations are per editor.)\n\t\tif (this.updating.get(editor)) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.updating.set(editor, true);\n\n\t\t\tlet conflicts = await this.tracker.getConflicts(editor.document);\n\t\t\tif (vscode.window.visibleTextEditors.indexOf(editor) === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (conflicts.length === 0) {\n\t\t\t\tthis.removeDecorations(editor);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Store decorations keyed by the type of decoration, set decoration wants a \"style\"\n\t\t\t// to go with it, which will match this key (see constructor);\n\t\t\tlet matchDecorations: { [key: string]: vscode.Range[] } = {};\n\n\t\t\tlet pushDecoration = (key: string, d: vscode.Range) => {\n\t\t\t\tmatchDecorations[key] = matchDecorations[key] || [];\n\t\t\t\tmatchDecorations[key].push(d);\n\t\t\t};\n\n\t\t\tconflicts.forEach(conflict => {\n\t\t\t\t// TODO, this could be more effective, just call getMatchPositions once with a map of decoration to position\n\t\t\t\tif (!conflict.current.decoratorContent.isEmpty) {\n\t\t\t\t\tpushDecoration('current.content', conflict.current.decoratorContent);\n\t\t\t\t}\n\t\t\t\tif (!conflict.incoming.decoratorContent.isEmpty) {\n\t\t\t\t\tpushDecoration('incoming.content', conflict.incoming.decoratorContent);\n\t\t\t\t}\n\n\t\t\t\tconflict.commonAncestors.forEach(commonAncestorsRegion => {\n\t\t\t\t\tif (!commonAncestorsRegion.decoratorContent.isEmpty) {\n\t\t\t\t\t\tpushDecoration('commonAncestors.content', commonAncestorsRegion.decoratorContent);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (this.config!.enableDecorations) {\n\t\t\t\t\tpushDecoration('current.header', conflict.current.header);\n\t\t\t\t\tpushDecoration('splitter', conflict.splitter);\n\t\t\t\t\tpushDecoration('incoming.header', conflict.incoming.header);\n\n\t\t\t\t\tconflict.commonAncestors.forEach(commonAncestorsRegion => {\n\t\t\t\t\t\tpushDecoration('commonAncestors.header', commonAncestorsRegion.header);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// For each match we've generated, apply the generated decoration with the matching decoration type to the\n\t\t\t// editor instance. Keys in both matches and decorations should match.\n\t\t\tObject.keys(matchDecorations).forEach(decorationKey => {\n\t\t\t\tlet decorationType = this.decorations[decorationKey];\n\n\t\t\t\tif (decorationType) {\n\t\t\t\t\teditor.setDecorations(decorationType, matchDecorations[decorationKey]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t} finally {\n\t\t\tthis.updating.delete(editor);\n\t\t}\n\t}\n\n\tprivate removeDecorations(editor: vscode.TextEditor) {\n\t\t// Remove all decorations, there might be none\n\t\tObject.keys(this.decorations).forEach(decorationKey => {\n\n\t\t\t// Race condition, while editing the settings, it's possible to\n\t\t\t// generate regions before the configuration has been refreshed\n\t\t\tlet decorationType = this.decorations[decorationKey];\n\n\t\t\tif (decorationType) {\n\t\t\t\teditor.setDecorations(decorationType, []);\n\t\t\t}\n\t\t});\n\t}\n}\n"],"sourceRoot":""}